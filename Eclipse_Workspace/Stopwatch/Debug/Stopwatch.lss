
Stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002238  000022cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080006e  0080006e  000022da  2**0
                  ALLOC
  3 .stab         00001818  00000000  00000000  000022dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000963  00000000  00000000  00003af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004457  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004597  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004707  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006350  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000723b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008148  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000083d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008ba3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__vector_1>
       8:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__vector_2>
       c:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <main>
      8a:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_Init_CTC_Mode>:
unsigned char flag_pause = 0; // Flag to pause the timer
unsigned char flag_count = 0; // Flag to control the counting
unsigned char hours_flag = 0; // Flag to control the hours counting

// Function to initialize the Timer1 in CTC mode
void Timer1_Init_CTC_Mode(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	 * FOC1A --> Non PWM
	 * WGM12 --> CTC
	 * CS10 & CS12 --> CLK/1024
	 */
	// Set the Timer1 to CTC mode
	TCCR1A = (1 << FOC1A);                                 // Set the FOC1A bit to 1
     b4e:	ef e4       	ldi	r30, 0x4F	; 79
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	88 e0       	ldi	r24, 0x08	; 8
     b54:	80 83       	st	Z, r24
	    TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS12); // Set the WGM12, CS10, and CS12 bits to 1
     b56:	ee e4       	ldi	r30, 0x4E	; 78
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8d e0       	ldi	r24, 0x0D	; 13
     b5c:	80 83       	st	Z, r24
	    TCNT1 = 0; // Initialize the counter register to 0
     b5e:	ec e4       	ldi	r30, 0x4C	; 76
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	11 82       	std	Z+1, r1	; 0x01
     b64:	10 82       	st	Z, r1
	    OCR1A = 15625; // Set the compare register to 15625 (1 second)
     b66:	ea e4       	ldi	r30, 0x4A	; 74
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	89 e0       	ldi	r24, 0x09	; 9
     b6c:	9d e3       	ldi	r25, 0x3D	; 61
     b6e:	91 83       	std	Z+1, r25	; 0x01
     b70:	80 83       	st	Z, r24
	    TIMSK |= (1 << OCIE1A); // Enable the interrupt module
     b72:	a9 e5       	ldi	r26, 0x59	; 89
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e9 e5       	ldi	r30, 0x59	; 89
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 61       	ori	r24, 0x10	; 16
     b7e:	8c 93       	st	X, r24
}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <__vector_7>:
// Interrupt Service Routine for Timer1
ISR(TIMER1_COMPA_vect) {
     b86:	1f 92       	push	r1
     b88:	0f 92       	push	r0
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	0f 92       	push	r0
     b8e:	11 24       	eor	r1, r1
     b90:	8f 93       	push	r24
     b92:	af 93       	push	r26
     b94:	bf 93       	push	r27
     b96:	ef 93       	push	r30
     b98:	ff 93       	push	r31
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
    // Check if the counting flag is 0
    if (flag_count == 0) {
     ba2:	80 91 75 00 	lds	r24, 0x0075
     ba6:	88 23       	and	r24, r24
     ba8:	09 f0       	breq	.+2      	; 0xbac <__vector_7+0x26>
     baa:	47 c0       	rjmp	.+142    	; 0xc3a <__vector_7+0xb4>
        // Check if the pause flag is 0
        if (flag_pause == 0) {
     bac:	80 91 74 00 	lds	r24, 0x0074
     bb0:	88 23       	and	r24, r24
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <__vector_7+0x30>
     bb4:	ad c0       	rjmp	.+346    	; 0xd10 <__vector_7+0x18a>
            // Increment the seconds
            if (second_count1 == 9) {
     bb6:	80 91 6e 00 	lds	r24, 0x006E
     bba:	89 30       	cpi	r24, 0x09	; 9
     bbc:	c1 f5       	brne	.+112    	; 0xc2e <__vector_7+0xa8>
                second_count1 = 0; // Reset the ones digit of the seconds
     bbe:	10 92 6e 00 	sts	0x006E, r1
                second_count2++; // Increment the tens digit of the seconds
     bc2:	80 91 6f 00 	lds	r24, 0x006F
     bc6:	8f 5f       	subi	r24, 0xFF	; 255
     bc8:	80 93 6f 00 	sts	0x006F, r24

                // Check if the tens digit of the seconds is 6
                if (second_count2 == 6) {
     bcc:	80 91 6f 00 	lds	r24, 0x006F
     bd0:	86 30       	cpi	r24, 0x06	; 6
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <__vector_7+0x50>
     bd4:	9d c0       	rjmp	.+314    	; 0xd10 <__vector_7+0x18a>
                    second_count2 = 0; // Reset the tens digit of the seconds
     bd6:	10 92 6f 00 	sts	0x006F, r1
                    minutes_count1++; // Increment the ones digit of the minutes
     bda:	80 91 70 00 	lds	r24, 0x0070
     bde:	8f 5f       	subi	r24, 0xFF	; 255
     be0:	80 93 70 00 	sts	0x0070, r24

                    // Check if the ones digit of the minutes is 9
                    if (minutes_count1 == 9) {
     be4:	80 91 70 00 	lds	r24, 0x0070
     be8:	89 30       	cpi	r24, 0x09	; 9
     bea:	09 f0       	breq	.+2      	; 0xbee <__vector_7+0x68>
     bec:	91 c0       	rjmp	.+290    	; 0xd10 <__vector_7+0x18a>
                        minutes_count1 = 0; // Reset the ones digit of the minutes
     bee:	10 92 70 00 	sts	0x0070, r1
                        minutes_count2++; // Increment the tens digit of the minutes
     bf2:	80 91 71 00 	lds	r24, 0x0071
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	80 93 71 00 	sts	0x0071, r24

                        // Check if the tens digit of the minutes is 6
                        if (minutes_count2 == 6) {
     bfc:	80 91 71 00 	lds	r24, 0x0071
     c00:	86 30       	cpi	r24, 0x06	; 6
     c02:	09 f0       	breq	.+2      	; 0xc06 <__vector_7+0x80>
     c04:	85 c0       	rjmp	.+266    	; 0xd10 <__vector_7+0x18a>
                            minutes_count2 = 0; // Reset the tens digit of the minutes
     c06:	10 92 71 00 	sts	0x0071, r1
                            hours_count1++; // Increment the ones digit of the hours
     c0a:	80 91 72 00 	lds	r24, 0x0072
     c0e:	8f 5f       	subi	r24, 0xFF	; 255
     c10:	80 93 72 00 	sts	0x0072, r24

                            // Check if the ones digit of the hours is 9
                            if (hours_count1 == 9) {
     c14:	80 91 72 00 	lds	r24, 0x0072
     c18:	89 30       	cpi	r24, 0x09	; 9
     c1a:	09 f0       	breq	.+2      	; 0xc1e <__vector_7+0x98>
     c1c:	79 c0       	rjmp	.+242    	; 0xd10 <__vector_7+0x18a>
                                hours_count1 = 0; // Reset the ones digit of the hours
     c1e:	10 92 72 00 	sts	0x0072, r1
                                hours_count2++; // Increment the tens digit of the hours
     c22:	80 91 73 00 	lds	r24, 0x0073
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	80 93 73 00 	sts	0x0073, r24
     c2c:	71 c0       	rjmp	.+226    	; 0xd10 <__vector_7+0x18a>
                            }
                        }
                    }
                }
            } else {
                second_count1++; // Increment the ones digit of the seconds
     c2e:	80 91 6e 00 	lds	r24, 0x006E
     c32:	8f 5f       	subi	r24, 0xFF	; 255
     c34:	80 93 6e 00 	sts	0x006E, r24
     c38:	6b c0       	rjmp	.+214    	; 0xd10 <__vector_7+0x18a>
            }
        }
    } else {
        // Check if the pause flag is 0
        if (flag_pause == 0) {
     c3a:	80 91 74 00 	lds	r24, 0x0074
     c3e:	88 23       	and	r24, r24
     c40:	09 f0       	breq	.+2      	; 0xc44 <__vector_7+0xbe>
     c42:	66 c0       	rjmp	.+204    	; 0xd10 <__vector_7+0x18a>
            // Check if all the time variables are 0
            if ((second_count1 == 0) && (second_count2 == 0) && (minutes_count1 == 0) && (minutes_count2 == 0) && (hours_count1 == 0) && (hours_count2 == 0)) {
     c44:	80 91 6e 00 	lds	r24, 0x006E
     c48:	88 23       	and	r24, r24
     c4a:	e1 f4       	brne	.+56     	; 0xc84 <__vector_7+0xfe>
     c4c:	80 91 6f 00 	lds	r24, 0x006F
     c50:	88 23       	and	r24, r24
     c52:	c1 f4       	brne	.+48     	; 0xc84 <__vector_7+0xfe>
     c54:	80 91 70 00 	lds	r24, 0x0070
     c58:	88 23       	and	r24, r24
     c5a:	a1 f4       	brne	.+40     	; 0xc84 <__vector_7+0xfe>
     c5c:	80 91 71 00 	lds	r24, 0x0071
     c60:	88 23       	and	r24, r24
     c62:	81 f4       	brne	.+32     	; 0xc84 <__vector_7+0xfe>
     c64:	80 91 72 00 	lds	r24, 0x0072
     c68:	88 23       	and	r24, r24
     c6a:	61 f4       	brne	.+24     	; 0xc84 <__vector_7+0xfe>
     c6c:	80 91 73 00 	lds	r24, 0x0073
     c70:	88 23       	and	r24, r24
     c72:	41 f4       	brne	.+16     	; 0xc84 <__vector_7+0xfe>
                PORTD |= (1 << PD0); // Set the PD0 pin high
     c74:	a2 e3       	ldi	r26, 0x32	; 50
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e2 e3       	ldi	r30, 0x32	; 50
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	81 60       	ori	r24, 0x01	; 1
     c80:	8c 93       	st	X, r24
     c82:	46 c0       	rjmp	.+140    	; 0xd10 <__vector_7+0x18a>
            } else {
                // Decrement the seconds
                if (second_count1 == 0) {
     c84:	80 91 6e 00 	lds	r24, 0x006E
     c88:	88 23       	and	r24, r24
     c8a:	e9 f5       	brne	.+122    	; 0xd06 <__vector_7+0x180>
                    second_count1 = 9; // Reset the ones digit of the seconds
     c8c:	89 e0       	ldi	r24, 0x09	; 9
     c8e:	80 93 6e 00 	sts	0x006E, r24
                    if (second_count2 == 0) {
     c92:	80 91 6f 00 	lds	r24, 0x006F
     c96:	88 23       	and	r24, r24
     c98:	81 f5       	brne	.+96     	; 0xcfa <__vector_7+0x174>
                        second_count2 = 5; // Reset the tens digit of the seconds
     c9a:	85 e0       	ldi	r24, 0x05	; 5
     c9c:	80 93 6f 00 	sts	0x006F, r24
                        if (minutes_count1 == 0) {
     ca0:	80 91 70 00 	lds	r24, 0x0070
     ca4:	88 23       	and	r24, r24
     ca6:	19 f5       	brne	.+70     	; 0xcee <__vector_7+0x168>
                            minutes_count1 = 9; // Reset the ones digit of the minutes
     ca8:	89 e0       	ldi	r24, 0x09	; 9
     caa:	80 93 70 00 	sts	0x0070, r24
                            if (minutes_count2 == 0) {
     cae:	80 91 71 00 	lds	r24, 0x0071
     cb2:	88 23       	and	r24, r24
     cb4:	b1 f4       	brne	.+44     	; 0xce2 <__vector_7+0x15c>
                                minutes_count2 = 5; // Reset the tens digit of the minutes
     cb6:	85 e0       	ldi	r24, 0x05	; 5
     cb8:	80 93 71 00 	sts	0x0071, r24
                                if (hours_count1 == 0) {
     cbc:	80 91 72 00 	lds	r24, 0x0072
     cc0:	88 23       	and	r24, r24
     cc2:	49 f4       	brne	.+18     	; 0xcd6 <__vector_7+0x150>
                                    hours_count1 = 9; // Reset the ones digit of the hours
     cc4:	89 e0       	ldi	r24, 0x09	; 9
     cc6:	80 93 72 00 	sts	0x0072, r24
                                    hours_count2--; // Decrement the tens digit of the hours
     cca:	80 91 73 00 	lds	r24, 0x0073
     cce:	81 50       	subi	r24, 0x01	; 1
     cd0:	80 93 73 00 	sts	0x0073, r24
     cd4:	1d c0       	rjmp	.+58     	; 0xd10 <__vector_7+0x18a>
                                } else {
                                    hours_count1--; // Decrement the ones digit of the hours
     cd6:	80 91 72 00 	lds	r24, 0x0072
     cda:	81 50       	subi	r24, 0x01	; 1
     cdc:	80 93 72 00 	sts	0x0072, r24
     ce0:	17 c0       	rjmp	.+46     	; 0xd10 <__vector_7+0x18a>
                                }
                            } else {
                                minutes_count2--; // Decrement the tens digit of the minutes
     ce2:	80 91 71 00 	lds	r24, 0x0071
     ce6:	81 50       	subi	r24, 0x01	; 1
     ce8:	80 93 71 00 	sts	0x0071, r24
     cec:	11 c0       	rjmp	.+34     	; 0xd10 <__vector_7+0x18a>
                            }
                        } else {
                            minutes_count1--; // Decrement the ones digit of the minutes
     cee:	80 91 70 00 	lds	r24, 0x0070
     cf2:	81 50       	subi	r24, 0x01	; 1
     cf4:	80 93 70 00 	sts	0x0070, r24
     cf8:	0b c0       	rjmp	.+22     	; 0xd10 <__vector_7+0x18a>
                        }
                    } else {
                        second_count2--; // Decrement the tens digit of the seconds
     cfa:	80 91 6f 00 	lds	r24, 0x006F
     cfe:	81 50       	subi	r24, 0x01	; 1
     d00:	80 93 6f 00 	sts	0x006F, r24
     d04:	05 c0       	rjmp	.+10     	; 0xd10 <__vector_7+0x18a>
                    }
                } else {
                    second_count1--; // Decrement the ones digit of the seconds
     d06:	80 91 6e 00 	lds	r24, 0x006E
     d0a:	81 50       	subi	r24, 0x01	; 1
     d0c:	80 93 6e 00 	sts	0x006E, r24
                }
            }
        }
    }
}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	ff 91       	pop	r31
     d16:	ef 91       	pop	r30
     d18:	bf 91       	pop	r27
     d1a:	af 91       	pop	r26
     d1c:	8f 91       	pop	r24
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <INT0_Init>:

// Function to initialize the INT0 interrupt
void INT0_Init(void) {
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
    DDRD &= (~(1 << PD2)); // Configure the PD2 pin as an input
     d30:	a1 e3       	ldi	r26, 0x31	; 49
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e1 e3       	ldi	r30, 0x31	; 49
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8b 7f       	andi	r24, 0xFB	; 251
     d3c:	8c 93       	st	X, r24
    PORTD |= (1 << PD2); // Enable the internal pull-up resistor
     d3e:	a2 e3       	ldi	r26, 0x32	; 50
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e2 e3       	ldi	r30, 0x32	; 50
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	84 60       	ori	r24, 0x04	; 4
     d4a:	8c 93       	st	X, r24
    MCUCR |= (1 << ISC01); // Trigger the INT0 interrupt on the falling edge
     d4c:	a5 e5       	ldi	r26, 0x55	; 85
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e5 e5       	ldi	r30, 0x55	; 85
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	82 60       	ori	r24, 0x02	; 2
     d58:	8c 93       	st	X, r24
    GICR |= (1 << INT0); // Enable the INT0 interrupt
     d5a:	ab e5       	ldi	r26, 0x5B	; 91
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	eb e5       	ldi	r30, 0x5B	; 91
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	80 64       	ori	r24, 0x40	; 64
     d66:	8c 93       	st	X, r24
}
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <__vector_1>:

// Interrupt Service Routine for INT0
ISR(INT0_vect) {
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
    second_count1 = 0; // Reset the ones digit of the seconds
     d80:	10 92 6e 00 	sts	0x006E, r1
    second_count2 = 0; // Reset the tens digit of the seconds
     d84:	10 92 6f 00 	sts	0x006F, r1
    minutes_count1 = 0; // Reset the ones digit of the minutes
     d88:	10 92 70 00 	sts	0x0070, r1
    minutes_count2 = 0; // Reset the tens digit of the minutes
     d8c:	10 92 71 00 	sts	0x0071, r1
    hours_count1 = 0; // Reset the ones digit of the hours
     d90:	10 92 72 00 	sts	0x0072, r1
    hours_count2 = 0; // Reset the tens digit of the hours
     d94:	10 92 73 00 	sts	0x0073, r1
}
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <INT1_Init>:

// Function to initialize the INT1 interrupt
void INT1_Init(void) {
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
    DDRD &= (~(1 << PD3)); // Configure the PD3 pin as an input
     dae:	a1 e3       	ldi	r26, 0x31	; 49
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e1 e3       	ldi	r30, 0x31	; 49
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	87 7f       	andi	r24, 0xF7	; 247
     dba:	8c 93       	st	X, r24
    MCUCR |= (1 << ISC11) | (1 << ISC10); // Trigger the INT1 interrupt on the rising edge
     dbc:	a5 e5       	ldi	r26, 0x55	; 85
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e5 e5       	ldi	r30, 0x55	; 85
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8c 60       	ori	r24, 0x0C	; 12
     dc8:	8c 93       	st	X, r24
    GICR |= (1 << INT1); // Enable the INT1 interrupt
     dca:	ab e5       	ldi	r26, 0x5B	; 91
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	eb e5       	ldi	r30, 0x5B	; 91
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	80 68       	ori	r24, 0x80	; 128
     dd6:	8c 93       	st	X, r24
}
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	08 95       	ret

00000dde <__vector_2>:

// Interrupt Service Routine for INT1
ISR(INT1_vect) {
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	8f 93       	push	r24
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
    flag_pause = 1; // Set the pause flag to 1
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	80 93 74 00 	sts	0x0074, r24
}
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	8f 91       	pop	r24
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <INT2_Init>:

// Function to initialize the INT2 interrupt
void INT2_Init(void) {
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
    DDRB &= (~(1 << PB2)); // Configure the PB2 pin as an input
     e10:	a7 e3       	ldi	r26, 0x37	; 55
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e3       	ldi	r30, 0x37	; 55
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	8b 7f       	andi	r24, 0xFB	; 251
     e1c:	8c 93       	st	X, r24
    PORTB |= (1 << PB2); // Enable the internal pull-up resistor
     e1e:	a8 e3       	ldi	r26, 0x38	; 56
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e8 e3       	ldi	r30, 0x38	; 56
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	84 60       	ori	r24, 0x04	; 4
     e2a:	8c 93       	st	X, r24
    MCUCSR &= ~(1 << ISC2); // Trigger the INT2 interrupt on the falling edge
     e2c:	a4 e5       	ldi	r26, 0x54	; 84
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e4 e5       	ldi	r30, 0x54	; 84
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8f 7b       	andi	r24, 0xBF	; 191
     e38:	8c 93       	st	X, r24
    GICR |= (1 << INT2); // Enable the INT2 interrupt
     e3a:	ab e5       	ldi	r26, 0x5B	; 91
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	eb e5       	ldi	r30, 0x5B	; 91
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 62       	ori	r24, 0x20	; 32
     e46:	8c 93       	st	X, r24
}
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <__vector_3>:

// Interrupt Service Routine for INT2
ISR(INT2_vect) {
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
    flag_pause = 0; // Reset the pause flag to 0
     e60:	10 92 74 00 	sts	0x0074, r1
}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	0f 90       	pop	r0
     e6e:	1f 90       	pop	r1
     e70:	18 95       	reti

00000e72 <Toggle_Mode>:

// Function to toggle the mode
void Toggle_Mode(void) {
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
    DDRB &= ~(1 << PB7); // Configure the PB7 pin as an input
     e7a:	a7 e3       	ldi	r26, 0x37	; 55
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e7 e3       	ldi	r30, 0x37	; 55
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 77       	andi	r24, 0x7F	; 127
     e86:	8c 93       	st	X, r24
    PORTB |= (1 << PB7); // Enable the internal pull-up resistor
     e88:	a8 e3       	ldi	r26, 0x38	; 56
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e8 e3       	ldi	r30, 0x38	; 56
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 68       	ori	r24, 0x80	; 128
     e94:	8c 93       	st	X, r24
    if (!(PINB & (1 << PB7))) { // Check if the PB7 pin is low
     e96:	e6 e3       	ldi	r30, 0x36	; 54
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 23       	and	r24, r24
     e9e:	b4 f0       	brlt	.+44     	; 0xecc <Toggle_Mode+0x5a>
       if(flag_count == 0){ 		//check if flag = 0;
     ea0:	80 91 75 00 	lds	r24, 0x0075
     ea4:	88 23       	and	r24, r24
     ea6:	49 f5       	brne	.+82     	; 0xefa <Toggle_Mode+0x88>
            PORTD |= (1 << PD5); // Set the counting flag to 1
     ea8:	a2 e3       	ldi	r26, 0x32	; 50
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e2 e3       	ldi	r30, 0x32	; 50
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 62       	ori	r24, 0x20	; 32
     eb4:	8c 93       	st	X, r24
            PORTD &= ~(1 << PD4);	// Set the PD5 pin high
     eb6:	a2 e3       	ldi	r26, 0x32	; 50
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e2 e3       	ldi	r30, 0x32	; 50
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8f 7e       	andi	r24, 0xEF	; 239
     ec2:	8c 93       	st	X, r24
            flag_count = 1 ;	//set flag to 1
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	80 93 75 00 	sts	0x0075, r24
     eca:	17 c0       	rjmp	.+46     	; 0xefa <Toggle_Mode+0x88>
        }
    } else {
        flag_count = 0; // Reset the counting flag to 0
     ecc:	10 92 75 00 	sts	0x0075, r1
        PORTD |= (1 << PD4); // Set the PD4 pin high
     ed0:	a2 e3       	ldi	r26, 0x32	; 50
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e2 e3       	ldi	r30, 0x32	; 50
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 61       	ori	r24, 0x10	; 16
     edc:	8c 93       	st	X, r24
        PORTD &= ~(1 << PD5); // Reset the PD5 pin
     ede:	a2 e3       	ldi	r26, 0x32	; 50
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e2 e3       	ldi	r30, 0x32	; 50
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 7d       	andi	r24, 0xDF	; 223
     eea:	8c 93       	st	X, r24
        PORTD &= ~(1 << PD0); // Reset the PD0 pin
     eec:	a2 e3       	ldi	r26, 0x32	; 50
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e2 e3       	ldi	r30, 0x32	; 50
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8e 7f       	andi	r24, 0xFE	; 254
     ef8:	8c 93       	st	X, r24
    }
}
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <adjust_hours>:
// Function to adjust the hours
void adjust_hours(void) {
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	aa 97       	sbiw	r28, 0x2a	; 42
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
    static unsigned char hour_increment_flag = 1; // Flag to increment the hours
    static unsigned char hour_decrement_flag = 1; // Flag to decrement the hours

    DDRB &= (~(1 << PB0)) & (~(1 << PB1)); // Configure the PB0 and PB1 pins as inputs
     f14:	a7 e3       	ldi	r26, 0x37	; 55
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e7 e3       	ldi	r30, 0x37	; 55
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8c 7f       	andi	r24, 0xFC	; 252
     f20:	8c 93       	st	X, r24
    PORTB |= (1 << PB0) | (1 << PB1); // Enable the internal pull-up resistors
     f22:	a8 e3       	ldi	r26, 0x38	; 56
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e8 e3       	ldi	r30, 0x38	; 56
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	83 60       	ori	r24, 0x03	; 3
     f2e:	8c 93       	st	X, r24

    if (!(PINB & (1 << PB1))) { // Check if the increment hours button is pressed
     f30:	e6 e3       	ldi	r30, 0x36	; 54
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	82 70       	andi	r24, 0x02	; 2
     f3c:	90 70       	andi	r25, 0x00	; 0
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	09 f0       	breq	.+2      	; 0xf44 <adjust_hours+0x44>
     f42:	9a c0       	rjmp	.+308    	; 0x1078 <adjust_hours+0x178>
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a0 ef       	ldi	r26, 0xF0	; 240
     f4a:	b1 e4       	ldi	r27, 0x41	; 65
     f4c:	8f a3       	std	Y+39, r24	; 0x27
     f4e:	98 a7       	std	Y+40, r25	; 0x28
     f50:	a9 a7       	std	Y+41, r26	; 0x29
     f52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f54:	6f a1       	ldd	r22, Y+39	; 0x27
     f56:	78 a5       	ldd	r23, Y+40	; 0x28
     f58:	89 a5       	ldd	r24, Y+41	; 0x29
     f5a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	4a e7       	ldi	r20, 0x7A	; 122
     f62:	55 e4       	ldi	r21, 0x45	; 69
     f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	8b a3       	std	Y+35, r24	; 0x23
     f6e:	9c a3       	std	Y+36, r25	; 0x24
     f70:	ad a3       	std	Y+37, r26	; 0x25
     f72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f74:	6b a1       	ldd	r22, Y+35	; 0x23
     f76:	7c a1       	ldd	r23, Y+36	; 0x24
     f78:	8d a1       	ldd	r24, Y+37	; 0x25
     f7a:	9e a1       	ldd	r25, Y+38	; 0x26
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e8       	ldi	r20, 0x80	; 128
     f82:	5f e3       	ldi	r21, 0x3F	; 63
     f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f88:	88 23       	and	r24, r24
     f8a:	2c f4       	brge	.+10     	; 0xf96 <adjust_hours+0x96>
		__ticks = 1;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	9a a3       	std	Y+34, r25	; 0x22
     f92:	89 a3       	std	Y+33, r24	; 0x21
     f94:	3f c0       	rjmp	.+126    	; 0x1014 <adjust_hours+0x114>
	else if (__tmp > 65535)
     f96:	6b a1       	ldd	r22, Y+35	; 0x23
     f98:	7c a1       	ldd	r23, Y+36	; 0x24
     f9a:	8d a1       	ldd	r24, Y+37	; 0x25
     f9c:	9e a1       	ldd	r25, Y+38	; 0x26
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	3f ef       	ldi	r19, 0xFF	; 255
     fa2:	4f e7       	ldi	r20, 0x7F	; 127
     fa4:	57 e4       	ldi	r21, 0x47	; 71
     fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     faa:	18 16       	cp	r1, r24
     fac:	4c f5       	brge	.+82     	; 0x1000 <adjust_hours+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fae:	6f a1       	ldd	r22, Y+39	; 0x27
     fb0:	78 a5       	ldd	r23, Y+40	; 0x28
     fb2:	89 a5       	ldd	r24, Y+41	; 0x29
     fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	51 e4       	ldi	r21, 0x41	; 65
     fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	9a a3       	std	Y+34, r25	; 0x22
     fd4:	89 a3       	std	Y+33, r24	; 0x21
     fd6:	0f c0       	rjmp	.+30     	; 0xff6 <adjust_hours+0xf6>
     fd8:	80 e9       	ldi	r24, 0x90	; 144
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	98 a3       	std	Y+32, r25	; 0x20
     fde:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fe0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fe2:	98 a1       	ldd	r25, Y+32	; 0x20
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <adjust_hours+0xe4>
     fe8:	98 a3       	std	Y+32, r25	; 0x20
     fea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fec:	89 a1       	ldd	r24, Y+33	; 0x21
     fee:	9a a1       	ldd	r25, Y+34	; 0x22
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	9a a3       	std	Y+34, r25	; 0x22
     ff4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff6:	89 a1       	ldd	r24, Y+33	; 0x21
     ff8:	9a a1       	ldd	r25, Y+34	; 0x22
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	69 f7       	brne	.-38     	; 0xfd8 <adjust_hours+0xd8>
     ffe:	14 c0       	rjmp	.+40     	; 0x1028 <adjust_hours+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1000:	6b a1       	ldd	r22, Y+35	; 0x23
    1002:	7c a1       	ldd	r23, Y+36	; 0x24
    1004:	8d a1       	ldd	r24, Y+37	; 0x25
    1006:	9e a1       	ldd	r25, Y+38	; 0x26
    1008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	9a a3       	std	Y+34, r25	; 0x22
    1012:	89 a3       	std	Y+33, r24	; 0x21
    1014:	89 a1       	ldd	r24, Y+33	; 0x21
    1016:	9a a1       	ldd	r25, Y+34	; 0x22
    1018:	9e 8f       	std	Y+30, r25	; 0x1e
    101a:	8d 8f       	std	Y+29, r24	; 0x1d
    101c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    101e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <adjust_hours+0x120>
    1024:	9e 8f       	std	Y+30, r25	; 0x1e
    1026:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(30); // Debounce delay
        if (!(PINB & (1 << PB1)) && hour_increment_flag) { // Confirm button press
    1028:	e6 e3       	ldi	r30, 0x36	; 54
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	82 70       	andi	r24, 0x02	; 2
    1034:	90 70       	andi	r25, 0x00	; 0
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	11 f5       	brne	.+68     	; 0x107e <adjust_hours+0x17e>
    103a:	80 91 69 00 	lds	r24, 0x0069
    103e:	88 23       	and	r24, r24
    1040:	f1 f0       	breq	.+60     	; 0x107e <adjust_hours+0x17e>
            hour_increment_flag = 0; // Reset the increment flag
    1042:	10 92 69 00 	sts	0x0069, r1
            if (hours_count1 == 9) {
    1046:	80 91 72 00 	lds	r24, 0x0072
    104a:	89 30       	cpi	r24, 0x09	; 9
    104c:	79 f4       	brne	.+30     	; 0x106c <adjust_hours+0x16c>
                hours_count1 = 0; // Reset the ones digit of the hours
    104e:	10 92 72 00 	sts	0x0072, r1
                if (hours_count2 == 9) {
    1052:	80 91 73 00 	lds	r24, 0x0073
    1056:	89 30       	cpi	r24, 0x09	; 9
    1058:	19 f4       	brne	.+6      	; 0x1060 <adjust_hours+0x160>
                    hours_count2 = 0; // Reset the tens digit of the hours
    105a:	10 92 73 00 	sts	0x0073, r1
    105e:	0f c0       	rjmp	.+30     	; 0x107e <adjust_hours+0x17e>
                } else {
                    hours_count2++; // Increment the tens digit of the hours
    1060:	80 91 73 00 	lds	r24, 0x0073
    1064:	8f 5f       	subi	r24, 0xFF	; 255
    1066:	80 93 73 00 	sts	0x0073, r24
    106a:	09 c0       	rjmp	.+18     	; 0x107e <adjust_hours+0x17e>
                }
            } else {
                hours_count1++; // Increment the ones digit of the hours
    106c:	80 91 72 00 	lds	r24, 0x0072
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	80 93 72 00 	sts	0x0072, r24
    1076:	03 c0       	rjmp	.+6      	; 0x107e <adjust_hours+0x17e>
            }
        }
    } else {
        hour_increment_flag = 1; // Set the increment flag when the button is not pressed
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	80 93 69 00 	sts	0x0069, r24
    }

    if (!(PINB & (1 << PB0))) { // Check if the decrement hours button is pressed
    107e:	e6 e3       	ldi	r30, 0x36	; 54
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	81 70       	andi	r24, 0x01	; 1
    108a:	90 70       	andi	r25, 0x00	; 0
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	09 f0       	breq	.+2      	; 0x1092 <adjust_hours+0x192>
    1090:	9c c0       	rjmp	.+312    	; 0x11ca <adjust_hours+0x2ca>
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	a0 ef       	ldi	r26, 0xF0	; 240
    1098:	b1 e4       	ldi	r27, 0x41	; 65
    109a:	89 8f       	std	Y+25, r24	; 0x19
    109c:	9a 8f       	std	Y+26, r25	; 0x1a
    109e:	ab 8f       	std	Y+27, r26	; 0x1b
    10a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a2:	69 8d       	ldd	r22, Y+25	; 0x19
    10a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	4a e7       	ldi	r20, 0x7A	; 122
    10b0:	55 e4       	ldi	r21, 0x45	; 69
    10b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	8d 8b       	std	Y+21, r24	; 0x15
    10bc:	9e 8b       	std	Y+22, r25	; 0x16
    10be:	af 8b       	std	Y+23, r26	; 0x17
    10c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10c2:	6d 89       	ldd	r22, Y+21	; 0x15
    10c4:	7e 89       	ldd	r23, Y+22	; 0x16
    10c6:	8f 89       	ldd	r24, Y+23	; 0x17
    10c8:	98 8d       	ldd	r25, Y+24	; 0x18
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e8       	ldi	r20, 0x80	; 128
    10d0:	5f e3       	ldi	r21, 0x3F	; 63
    10d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d6:	88 23       	and	r24, r24
    10d8:	2c f4       	brge	.+10     	; 0x10e4 <adjust_hours+0x1e4>
		__ticks = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9c 8b       	std	Y+20, r25	; 0x14
    10e0:	8b 8b       	std	Y+19, r24	; 0x13
    10e2:	3f c0       	rjmp	.+126    	; 0x1162 <adjust_hours+0x262>
	else if (__tmp > 65535)
    10e4:	6d 89       	ldd	r22, Y+21	; 0x15
    10e6:	7e 89       	ldd	r23, Y+22	; 0x16
    10e8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ea:	98 8d       	ldd	r25, Y+24	; 0x18
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	3f ef       	ldi	r19, 0xFF	; 255
    10f0:	4f e7       	ldi	r20, 0x7F	; 127
    10f2:	57 e4       	ldi	r21, 0x47	; 71
    10f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f8:	18 16       	cp	r1, r24
    10fa:	4c f5       	brge	.+82     	; 0x114e <adjust_hours+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fc:	69 8d       	ldd	r22, Y+25	; 0x19
    10fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1100:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1102:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e2       	ldi	r20, 0x20	; 32
    110a:	51 e4       	ldi	r21, 0x41	; 65
    110c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	bc 01       	movw	r22, r24
    1116:	cd 01       	movw	r24, r26
    1118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	9c 8b       	std	Y+20, r25	; 0x14
    1122:	8b 8b       	std	Y+19, r24	; 0x13
    1124:	0f c0       	rjmp	.+30     	; 0x1144 <adjust_hours+0x244>
    1126:	80 e9       	ldi	r24, 0x90	; 144
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	9a 8b       	std	Y+18, r25	; 0x12
    112c:	89 8b       	std	Y+17, r24	; 0x11
    112e:	89 89       	ldd	r24, Y+17	; 0x11
    1130:	9a 89       	ldd	r25, Y+18	; 0x12
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <adjust_hours+0x232>
    1136:	9a 8b       	std	Y+18, r25	; 0x12
    1138:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113a:	8b 89       	ldd	r24, Y+19	; 0x13
    113c:	9c 89       	ldd	r25, Y+20	; 0x14
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	9c 8b       	std	Y+20, r25	; 0x14
    1142:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1144:	8b 89       	ldd	r24, Y+19	; 0x13
    1146:	9c 89       	ldd	r25, Y+20	; 0x14
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	69 f7       	brne	.-38     	; 0x1126 <adjust_hours+0x226>
    114c:	14 c0       	rjmp	.+40     	; 0x1176 <adjust_hours+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114e:	6d 89       	ldd	r22, Y+21	; 0x15
    1150:	7e 89       	ldd	r23, Y+22	; 0x16
    1152:	8f 89       	ldd	r24, Y+23	; 0x17
    1154:	98 8d       	ldd	r25, Y+24	; 0x18
    1156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	9c 8b       	std	Y+20, r25	; 0x14
    1160:	8b 8b       	std	Y+19, r24	; 0x13
    1162:	8b 89       	ldd	r24, Y+19	; 0x13
    1164:	9c 89       	ldd	r25, Y+20	; 0x14
    1166:	98 8b       	std	Y+16, r25	; 0x10
    1168:	8f 87       	std	Y+15, r24	; 0x0f
    116a:	8f 85       	ldd	r24, Y+15	; 0x0f
    116c:	98 89       	ldd	r25, Y+16	; 0x10
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <adjust_hours+0x26e>
    1172:	98 8b       	std	Y+16, r25	; 0x10
    1174:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(30); // Debounce delay
        if (!(PINB & (1 << PB0)) && hour_decrement_flag) { // Confirm button press
    1176:	e6 e3       	ldi	r30, 0x36	; 54
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	81 70       	andi	r24, 0x01	; 1
    1182:	90 70       	andi	r25, 0x00	; 0
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	21 f5       	brne	.+72     	; 0x11d0 <adjust_hours+0x2d0>
    1188:	80 91 68 00 	lds	r24, 0x0068
    118c:	88 23       	and	r24, r24
    118e:	01 f1       	breq	.+64     	; 0x11d0 <adjust_hours+0x2d0>
            hour_decrement_flag = 0; // Reset the decrement flag
    1190:	10 92 68 00 	sts	0x0068, r1
            if (hours_count1 == 0) {
    1194:	80 91 72 00 	lds	r24, 0x0072
    1198:	88 23       	and	r24, r24
    119a:	89 f4       	brne	.+34     	; 0x11be <adjust_hours+0x2be>
                hours_count1 = 9; // Reset the ones digit of the hours
    119c:	89 e0       	ldi	r24, 0x09	; 9
    119e:	80 93 72 00 	sts	0x0072, r24
                if (hours_count2 == 0) {
    11a2:	80 91 73 00 	lds	r24, 0x0073
    11a6:	88 23       	and	r24, r24
    11a8:	21 f4       	brne	.+8      	; 0x11b2 <adjust_hours+0x2b2>
                    hours_count2 = 9; // Reset the tens digit of the hours
    11aa:	89 e0       	ldi	r24, 0x09	; 9
    11ac:	80 93 73 00 	sts	0x0073, r24
    11b0:	0f c0       	rjmp	.+30     	; 0x11d0 <adjust_hours+0x2d0>
                } else {
                    hours_count2--; // Decrement the tens digit of the hours
    11b2:	80 91 73 00 	lds	r24, 0x0073
    11b6:	81 50       	subi	r24, 0x01	; 1
    11b8:	80 93 73 00 	sts	0x0073, r24
    11bc:	09 c0       	rjmp	.+18     	; 0x11d0 <adjust_hours+0x2d0>
                }
            } else {
                hours_count1--; // Decrement the ones digit of the hours
    11be:	80 91 72 00 	lds	r24, 0x0072
    11c2:	81 50       	subi	r24, 0x01	; 1
    11c4:	80 93 72 00 	sts	0x0072, r24
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <adjust_hours+0x2d0>
            }
        }
    } else {
        hour_decrement_flag = 1; // Set the decrement flag when the button is not pressed
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 68 00 	sts	0x0068, r24
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a0 e2       	ldi	r26, 0x20	; 32
    11d6:	b1 e4       	ldi	r27, 0x41	; 65
    11d8:	8b 87       	std	Y+11, r24	; 0x0b
    11da:	9c 87       	std	Y+12, r25	; 0x0c
    11dc:	ad 87       	std	Y+13, r26	; 0x0d
    11de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	4a e7       	ldi	r20, 0x7A	; 122
    11ee:	55 e4       	ldi	r21, 0x45	; 69
    11f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	8f 83       	std	Y+7, r24	; 0x07
    11fa:	98 87       	std	Y+8, r25	; 0x08
    11fc:	a9 87       	std	Y+9, r26	; 0x09
    11fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1200:	6f 81       	ldd	r22, Y+7	; 0x07
    1202:	78 85       	ldd	r23, Y+8	; 0x08
    1204:	89 85       	ldd	r24, Y+9	; 0x09
    1206:	9a 85       	ldd	r25, Y+10	; 0x0a
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e8       	ldi	r20, 0x80	; 128
    120e:	5f e3       	ldi	r21, 0x3F	; 63
    1210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1214:	88 23       	and	r24, r24
    1216:	2c f4       	brge	.+10     	; 0x1222 <adjust_hours+0x322>
		__ticks = 1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9e 83       	std	Y+6, r25	; 0x06
    121e:	8d 83       	std	Y+5, r24	; 0x05
    1220:	3f c0       	rjmp	.+126    	; 0x12a0 <adjust_hours+0x3a0>
	else if (__tmp > 65535)
    1222:	6f 81       	ldd	r22, Y+7	; 0x07
    1224:	78 85       	ldd	r23, Y+8	; 0x08
    1226:	89 85       	ldd	r24, Y+9	; 0x09
    1228:	9a 85       	ldd	r25, Y+10	; 0x0a
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	3f ef       	ldi	r19, 0xFF	; 255
    122e:	4f e7       	ldi	r20, 0x7F	; 127
    1230:	57 e4       	ldi	r21, 0x47	; 71
    1232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1236:	18 16       	cp	r1, r24
    1238:	4c f5       	brge	.+82     	; 0x128c <adjust_hours+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123a:	6b 85       	ldd	r22, Y+11	; 0x0b
    123c:	7c 85       	ldd	r23, Y+12	; 0x0c
    123e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1240:	9e 85       	ldd	r25, Y+14	; 0x0e
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e2       	ldi	r20, 0x20	; 32
    1248:	51 e4       	ldi	r21, 0x41	; 65
    124a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	9e 83       	std	Y+6, r25	; 0x06
    1260:	8d 83       	std	Y+5, r24	; 0x05
    1262:	0f c0       	rjmp	.+30     	; 0x1282 <adjust_hours+0x382>
    1264:	80 e9       	ldi	r24, 0x90	; 144
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	9c 83       	std	Y+4, r25	; 0x04
    126a:	8b 83       	std	Y+3, r24	; 0x03
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <adjust_hours+0x370>
    1274:	9c 83       	std	Y+4, r25	; 0x04
    1276:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	9e 83       	std	Y+6, r25	; 0x06
    1280:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	69 f7       	brne	.-38     	; 0x1264 <adjust_hours+0x364>
    128a:	14 c0       	rjmp	.+40     	; 0x12b4 <adjust_hours+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128c:	6f 81       	ldd	r22, Y+7	; 0x07
    128e:	78 85       	ldd	r23, Y+8	; 0x08
    1290:	89 85       	ldd	r24, Y+9	; 0x09
    1292:	9a 85       	ldd	r25, Y+10	; 0x0a
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9e 83       	std	Y+6, r25	; 0x06
    129e:	8d 83       	std	Y+5, r24	; 0x05
    12a0:	8d 81       	ldd	r24, Y+5	; 0x05
    12a2:	9e 81       	ldd	r25, Y+6	; 0x06
    12a4:	9a 83       	std	Y+2, r25	; 0x02
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <adjust_hours+0x3ac>
    12b0:	9a 83       	std	Y+2, r25	; 0x02
    12b2:	89 83       	std	Y+1, r24	; 0x01
    }
    _delay_ms(10); // Add a delay to avoid busy-waiting
}
    12b4:	aa 96       	adiw	r28, 0x2a	; 42
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <adjust_minutes>:
// Function to adjust the minutes.
void adjust_minutes(void) {
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	aa 97       	sbiw	r28, 0x2a	; 42
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    // Define flags to prevent multiple increments or decrements
    static unsigned char minute_increment_flag = 1;
    static unsigned char minute_decrement_flag = 1;

    DDRB &= (~(1<<PB3)) & (~(1<<PB4));// Configure PB3 and PB4 as input pins
    12da:	a7 e3       	ldi	r26, 0x37	; 55
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e7 e3       	ldi	r30, 0x37	; 55
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	87 7e       	andi	r24, 0xE7	; 231
    12e6:	8c 93       	st	X, r24
    PORTB |= 1<<PB3 | 1<<PB4;// Enable internal pull-up resistors for PB3 and PB4
    12e8:	a8 e3       	ldi	r26, 0x38	; 56
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e8 e3       	ldi	r30, 0x38	; 56
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	88 61       	ori	r24, 0x18	; 24
    12f4:	8c 93       	st	X, r24

    if (!(PINB & (1 << PB4))) {    // Check if increment minutes button is pressed
    12f6:	e6 e3       	ldi	r30, 0x36	; 54
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	80 71       	andi	r24, 0x10	; 16
    1302:	90 70       	andi	r25, 0x00	; 0
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	09 f0       	breq	.+2      	; 0x130a <adjust_minutes+0x44>
    1308:	9a c0       	rjmp	.+308    	; 0x143e <adjust_minutes+0x178>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a0 ef       	ldi	r26, 0xF0	; 240
    1310:	b1 e4       	ldi	r27, 0x41	; 65
    1312:	8f a3       	std	Y+39, r24	; 0x27
    1314:	98 a7       	std	Y+40, r25	; 0x28
    1316:	a9 a7       	std	Y+41, r26	; 0x29
    1318:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131a:	6f a1       	ldd	r22, Y+39	; 0x27
    131c:	78 a5       	ldd	r23, Y+40	; 0x28
    131e:	89 a5       	ldd	r24, Y+41	; 0x29
    1320:	9a a5       	ldd	r25, Y+42	; 0x2a
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	4a e7       	ldi	r20, 0x7A	; 122
    1328:	55 e4       	ldi	r21, 0x45	; 69
    132a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	8b a3       	std	Y+35, r24	; 0x23
    1334:	9c a3       	std	Y+36, r25	; 0x24
    1336:	ad a3       	std	Y+37, r26	; 0x25
    1338:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    133a:	6b a1       	ldd	r22, Y+35	; 0x23
    133c:	7c a1       	ldd	r23, Y+36	; 0x24
    133e:	8d a1       	ldd	r24, Y+37	; 0x25
    1340:	9e a1       	ldd	r25, Y+38	; 0x26
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e8       	ldi	r20, 0x80	; 128
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    134e:	88 23       	and	r24, r24
    1350:	2c f4       	brge	.+10     	; 0x135c <adjust_minutes+0x96>
		__ticks = 1;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9a a3       	std	Y+34, r25	; 0x22
    1358:	89 a3       	std	Y+33, r24	; 0x21
    135a:	3f c0       	rjmp	.+126    	; 0x13da <adjust_minutes+0x114>
	else if (__tmp > 65535)
    135c:	6b a1       	ldd	r22, Y+35	; 0x23
    135e:	7c a1       	ldd	r23, Y+36	; 0x24
    1360:	8d a1       	ldd	r24, Y+37	; 0x25
    1362:	9e a1       	ldd	r25, Y+38	; 0x26
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	3f ef       	ldi	r19, 0xFF	; 255
    1368:	4f e7       	ldi	r20, 0x7F	; 127
    136a:	57 e4       	ldi	r21, 0x47	; 71
    136c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1370:	18 16       	cp	r1, r24
    1372:	4c f5       	brge	.+82     	; 0x13c6 <adjust_minutes+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1374:	6f a1       	ldd	r22, Y+39	; 0x27
    1376:	78 a5       	ldd	r23, Y+40	; 0x28
    1378:	89 a5       	ldd	r24, Y+41	; 0x29
    137a:	9a a5       	ldd	r25, Y+42	; 0x2a
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e2       	ldi	r20, 0x20	; 32
    1382:	51 e4       	ldi	r21, 0x41	; 65
    1384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9a a3       	std	Y+34, r25	; 0x22
    139a:	89 a3       	std	Y+33, r24	; 0x21
    139c:	0f c0       	rjmp	.+30     	; 0x13bc <adjust_minutes+0xf6>
    139e:	80 e9       	ldi	r24, 0x90	; 144
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	98 a3       	std	Y+32, r25	; 0x20
    13a4:	8f 8f       	std	Y+31, r24	; 0x1f
    13a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13a8:	98 a1       	ldd	r25, Y+32	; 0x20
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <adjust_minutes+0xe4>
    13ae:	98 a3       	std	Y+32, r25	; 0x20
    13b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b2:	89 a1       	ldd	r24, Y+33	; 0x21
    13b4:	9a a1       	ldd	r25, Y+34	; 0x22
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	9a a3       	std	Y+34, r25	; 0x22
    13ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13bc:	89 a1       	ldd	r24, Y+33	; 0x21
    13be:	9a a1       	ldd	r25, Y+34	; 0x22
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	69 f7       	brne	.-38     	; 0x139e <adjust_minutes+0xd8>
    13c4:	14 c0       	rjmp	.+40     	; 0x13ee <adjust_minutes+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c6:	6b a1       	ldd	r22, Y+35	; 0x23
    13c8:	7c a1       	ldd	r23, Y+36	; 0x24
    13ca:	8d a1       	ldd	r24, Y+37	; 0x25
    13cc:	9e a1       	ldd	r25, Y+38	; 0x26
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9a a3       	std	Y+34, r25	; 0x22
    13d8:	89 a3       	std	Y+33, r24	; 0x21
    13da:	89 a1       	ldd	r24, Y+33	; 0x21
    13dc:	9a a1       	ldd	r25, Y+34	; 0x22
    13de:	9e 8f       	std	Y+30, r25	; 0x1e
    13e0:	8d 8f       	std	Y+29, r24	; 0x1d
    13e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <adjust_minutes+0x120>
    13ea:	9e 8f       	std	Y+30, r25	; 0x1e
    13ec:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(30);              // Debounce delay to prevent multiple increments
        if (!(PINB & (1 << PB4)) && minute_increment_flag) {   // Confirm button press
    13ee:	e6 e3       	ldi	r30, 0x36	; 54
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	80 71       	andi	r24, 0x10	; 16
    13fa:	90 70       	andi	r25, 0x00	; 0
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	11 f5       	brne	.+68     	; 0x1444 <adjust_minutes+0x17e>
    1400:	80 91 6b 00 	lds	r24, 0x006B
    1404:	88 23       	and	r24, r24
    1406:	f1 f0       	breq	.+60     	; 0x1444 <adjust_minutes+0x17e>
            minute_increment_flag = 0;   // Reset increment flag
    1408:	10 92 6b 00 	sts	0x006B, r1
            if (minutes_count1 == 9) { // Check if minutes_count1 is 9
    140c:	80 91 70 00 	lds	r24, 0x0070
    1410:	89 30       	cpi	r24, 0x09	; 9
    1412:	79 f4       	brne	.+30     	; 0x1432 <adjust_minutes+0x16c>
                minutes_count1 = 0; // Reset minutes_count1
    1414:	10 92 70 00 	sts	0x0070, r1
                if (minutes_count2 == 9) { // Check if minutes_count2 is 9
    1418:	80 91 71 00 	lds	r24, 0x0071
    141c:	89 30       	cpi	r24, 0x09	; 9
    141e:	19 f4       	brne	.+6      	; 0x1426 <adjust_minutes+0x160>
                    minutes_count2 = 0; // Reset minutes_count2
    1420:	10 92 71 00 	sts	0x0071, r1
    1424:	0f c0       	rjmp	.+30     	; 0x1444 <adjust_minutes+0x17e>
                } else {
                    minutes_count2++;   // Increment minutes_count2
    1426:	80 91 71 00 	lds	r24, 0x0071
    142a:	8f 5f       	subi	r24, 0xFF	; 255
    142c:	80 93 71 00 	sts	0x0071, r24
    1430:	09 c0       	rjmp	.+18     	; 0x1444 <adjust_minutes+0x17e>
                }
            } else {
                minutes_count1++; // Increment minutes_count1
    1432:	80 91 70 00 	lds	r24, 0x0070
    1436:	8f 5f       	subi	r24, 0xFF	; 255
    1438:	80 93 70 00 	sts	0x0070, r24
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <adjust_minutes+0x17e>
            }
        }
    } else {
        minute_increment_flag = 1;// Set increment flag when button is not pressed
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	80 93 6b 00 	sts	0x006B, r24
    }
    if (!(PINB & (1 << PB3))) { // Check if decrement minutes button is pressed
    1444:	e6 e3       	ldi	r30, 0x36	; 54
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	88 70       	andi	r24, 0x08	; 8
    1450:	90 70       	andi	r25, 0x00	; 0
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	09 f0       	breq	.+2      	; 0x1458 <adjust_minutes+0x192>
    1456:	9c c0       	rjmp	.+312    	; 0x1590 <adjust_minutes+0x2ca>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a0 ef       	ldi	r26, 0xF0	; 240
    145e:	b1 e4       	ldi	r27, 0x41	; 65
    1460:	89 8f       	std	Y+25, r24	; 0x19
    1462:	9a 8f       	std	Y+26, r25	; 0x1a
    1464:	ab 8f       	std	Y+27, r26	; 0x1b
    1466:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1468:	69 8d       	ldd	r22, Y+25	; 0x19
    146a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    146c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    146e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	4a e7       	ldi	r20, 0x7A	; 122
    1476:	55 e4       	ldi	r21, 0x45	; 69
    1478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	8d 8b       	std	Y+21, r24	; 0x15
    1482:	9e 8b       	std	Y+22, r25	; 0x16
    1484:	af 8b       	std	Y+23, r26	; 0x17
    1486:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	7e 89       	ldd	r23, Y+22	; 0x16
    148c:	8f 89       	ldd	r24, Y+23	; 0x17
    148e:	98 8d       	ldd	r25, Y+24	; 0x18
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e8       	ldi	r20, 0x80	; 128
    1496:	5f e3       	ldi	r21, 0x3F	; 63
    1498:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    149c:	88 23       	and	r24, r24
    149e:	2c f4       	brge	.+10     	; 0x14aa <adjust_minutes+0x1e4>
		__ticks = 1;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9c 8b       	std	Y+20, r25	; 0x14
    14a6:	8b 8b       	std	Y+19, r24	; 0x13
    14a8:	3f c0       	rjmp	.+126    	; 0x1528 <adjust_minutes+0x262>
	else if (__tmp > 65535)
    14aa:	6d 89       	ldd	r22, Y+21	; 0x15
    14ac:	7e 89       	ldd	r23, Y+22	; 0x16
    14ae:	8f 89       	ldd	r24, Y+23	; 0x17
    14b0:	98 8d       	ldd	r25, Y+24	; 0x18
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	3f ef       	ldi	r19, 0xFF	; 255
    14b6:	4f e7       	ldi	r20, 0x7F	; 127
    14b8:	57 e4       	ldi	r21, 0x47	; 71
    14ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14be:	18 16       	cp	r1, r24
    14c0:	4c f5       	brge	.+82     	; 0x1514 <adjust_minutes+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c2:	69 8d       	ldd	r22, Y+25	; 0x19
    14c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e2       	ldi	r20, 0x20	; 32
    14d0:	51 e4       	ldi	r21, 0x41	; 65
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	bc 01       	movw	r22, r24
    14dc:	cd 01       	movw	r24, r26
    14de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	9c 8b       	std	Y+20, r25	; 0x14
    14e8:	8b 8b       	std	Y+19, r24	; 0x13
    14ea:	0f c0       	rjmp	.+30     	; 0x150a <adjust_minutes+0x244>
    14ec:	80 e9       	ldi	r24, 0x90	; 144
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	9a 8b       	std	Y+18, r25	; 0x12
    14f2:	89 8b       	std	Y+17, r24	; 0x11
    14f4:	89 89       	ldd	r24, Y+17	; 0x11
    14f6:	9a 89       	ldd	r25, Y+18	; 0x12
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <adjust_minutes+0x232>
    14fc:	9a 8b       	std	Y+18, r25	; 0x12
    14fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1500:	8b 89       	ldd	r24, Y+19	; 0x13
    1502:	9c 89       	ldd	r25, Y+20	; 0x14
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	9c 8b       	std	Y+20, r25	; 0x14
    1508:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150a:	8b 89       	ldd	r24, Y+19	; 0x13
    150c:	9c 89       	ldd	r25, Y+20	; 0x14
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	69 f7       	brne	.-38     	; 0x14ec <adjust_minutes+0x226>
    1512:	14 c0       	rjmp	.+40     	; 0x153c <adjust_minutes+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1514:	6d 89       	ldd	r22, Y+21	; 0x15
    1516:	7e 89       	ldd	r23, Y+22	; 0x16
    1518:	8f 89       	ldd	r24, Y+23	; 0x17
    151a:	98 8d       	ldd	r25, Y+24	; 0x18
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	9c 8b       	std	Y+20, r25	; 0x14
    1526:	8b 8b       	std	Y+19, r24	; 0x13
    1528:	8b 89       	ldd	r24, Y+19	; 0x13
    152a:	9c 89       	ldd	r25, Y+20	; 0x14
    152c:	98 8b       	std	Y+16, r25	; 0x10
    152e:	8f 87       	std	Y+15, r24	; 0x0f
    1530:	8f 85       	ldd	r24, Y+15	; 0x0f
    1532:	98 89       	ldd	r25, Y+16	; 0x10
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <adjust_minutes+0x26e>
    1538:	98 8b       	std	Y+16, r25	; 0x10
    153a:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(30);// Debounce delay to prevent multiple decrements
        if (!(PINB & (1 << PB3)) && minute_decrement_flag) { // Confirm button press
    153c:	e6 e3       	ldi	r30, 0x36	; 54
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	88 70       	andi	r24, 0x08	; 8
    1548:	90 70       	andi	r25, 0x00	; 0
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	21 f5       	brne	.+72     	; 0x1596 <adjust_minutes+0x2d0>
    154e:	80 91 6a 00 	lds	r24, 0x006A
    1552:	88 23       	and	r24, r24
    1554:	01 f1       	breq	.+64     	; 0x1596 <adjust_minutes+0x2d0>
            minute_decrement_flag = 0;// Reset decrement flag
    1556:	10 92 6a 00 	sts	0x006A, r1
            if (minutes_count1 == 0) {// Check if minutes_count1 is 0
    155a:	80 91 70 00 	lds	r24, 0x0070
    155e:	88 23       	and	r24, r24
    1560:	89 f4       	brne	.+34     	; 0x1584 <adjust_minutes+0x2be>
                minutes_count1 = 9;// Reset minutes_count1
    1562:	89 e0       	ldi	r24, 0x09	; 9
    1564:	80 93 70 00 	sts	0x0070, r24
                if (minutes_count2 == 0) {// Check if minutes_count2 is 0
    1568:	80 91 71 00 	lds	r24, 0x0071
    156c:	88 23       	and	r24, r24
    156e:	21 f4       	brne	.+8      	; 0x1578 <adjust_minutes+0x2b2>
                    minutes_count2 = 9;// Reset minutes_count2
    1570:	89 e0       	ldi	r24, 0x09	; 9
    1572:	80 93 71 00 	sts	0x0071, r24
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <adjust_minutes+0x2d0>
                } else {
                    minutes_count2--; // Decrement minutes_count2
    1578:	80 91 71 00 	lds	r24, 0x0071
    157c:	81 50       	subi	r24, 0x01	; 1
    157e:	80 93 71 00 	sts	0x0071, r24
    1582:	09 c0       	rjmp	.+18     	; 0x1596 <adjust_minutes+0x2d0>
                }
            } else {
                minutes_count1--;// Decrement minutes_count1
    1584:	80 91 70 00 	lds	r24, 0x0070
    1588:	81 50       	subi	r24, 0x01	; 1
    158a:	80 93 70 00 	sts	0x0070, r24
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <adjust_minutes+0x2d0>
            }
        }
    } else {
        minute_decrement_flag = 1;// Set decrement flag when button is not pressed
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	80 93 6a 00 	sts	0x006A, r24
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a0 e2       	ldi	r26, 0x20	; 32
    159c:	b1 e4       	ldi	r27, 0x41	; 65
    159e:	8b 87       	std	Y+11, r24	; 0x0b
    15a0:	9c 87       	std	Y+12, r25	; 0x0c
    15a2:	ad 87       	std	Y+13, r26	; 0x0d
    15a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	4a e7       	ldi	r20, 0x7A	; 122
    15b4:	55 e4       	ldi	r21, 0x45	; 69
    15b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	8f 83       	std	Y+7, r24	; 0x07
    15c0:	98 87       	std	Y+8, r25	; 0x08
    15c2:	a9 87       	std	Y+9, r26	; 0x09
    15c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15c6:	6f 81       	ldd	r22, Y+7	; 0x07
    15c8:	78 85       	ldd	r23, Y+8	; 0x08
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	5f e3       	ldi	r21, 0x3F	; 63
    15d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15da:	88 23       	and	r24, r24
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <adjust_minutes+0x322>
		__ticks = 1;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9e 83       	std	Y+6, r25	; 0x06
    15e4:	8d 83       	std	Y+5, r24	; 0x05
    15e6:	3f c0       	rjmp	.+126    	; 0x1666 <adjust_minutes+0x3a0>
	else if (__tmp > 65535)
    15e8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ea:	78 85       	ldd	r23, Y+8	; 0x08
    15ec:	89 85       	ldd	r24, Y+9	; 0x09
    15ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	3f ef       	ldi	r19, 0xFF	; 255
    15f4:	4f e7       	ldi	r20, 0x7F	; 127
    15f6:	57 e4       	ldi	r21, 0x47	; 71
    15f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15fc:	18 16       	cp	r1, r24
    15fe:	4c f5       	brge	.+82     	; 0x1652 <adjust_minutes+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1600:	6b 85       	ldd	r22, Y+11	; 0x0b
    1602:	7c 85       	ldd	r23, Y+12	; 0x0c
    1604:	8d 85       	ldd	r24, Y+13	; 0x0d
    1606:	9e 85       	ldd	r25, Y+14	; 0x0e
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e2       	ldi	r20, 0x20	; 32
    160e:	51 e4       	ldi	r21, 0x41	; 65
    1610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9e 83       	std	Y+6, r25	; 0x06
    1626:	8d 83       	std	Y+5, r24	; 0x05
    1628:	0f c0       	rjmp	.+30     	; 0x1648 <adjust_minutes+0x382>
    162a:	80 e9       	ldi	r24, 0x90	; 144
    162c:	91 e0       	ldi	r25, 0x01	; 1
    162e:	9c 83       	std	Y+4, r25	; 0x04
    1630:	8b 83       	std	Y+3, r24	; 0x03
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <adjust_minutes+0x370>
    163a:	9c 83       	std	Y+4, r25	; 0x04
    163c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	69 f7       	brne	.-38     	; 0x162a <adjust_minutes+0x364>
    1650:	14 c0       	rjmp	.+40     	; 0x167a <adjust_minutes+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1652:	6f 81       	ldd	r22, Y+7	; 0x07
    1654:	78 85       	ldd	r23, Y+8	; 0x08
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	9e 81       	ldd	r25, Y+6	; 0x06
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <adjust_minutes+0x3ac>
    1676:	9a 83       	std	Y+2, r25	; 0x02
    1678:	89 83       	std	Y+1, r24	; 0x01
    }
    _delay_ms(10); // Add a delay to avoid busy-waiting
}
    167a:	aa 96       	adiw	r28, 0x2a	; 42
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <adjust_seconds>:

void adjust_seconds(void) {
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	aa 97       	sbiw	r28, 0x2a	; 42
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    // Define flags to prevent multiple increments or decrements
    static unsigned char second_increment_flag = 1;
    static unsigned char second_decrement_flag = 1;

    DDRB &= (~(1<<PB5)) & (~(1<<PB6));// Configure PB5 and PB6 as input pins
    16a0:	a7 e3       	ldi	r26, 0x37	; 55
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e7 e3       	ldi	r30, 0x37	; 55
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	8f 79       	andi	r24, 0x9F	; 159
    16ac:	8c 93       	st	X, r24
    PORTB |= 1<<PB5 | 1<<PB6;// Enable internal pull-up resistors for PB5 and PB6
    16ae:	a8 e3       	ldi	r26, 0x38	; 56
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e8 e3       	ldi	r30, 0x38	; 56
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	80 66       	ori	r24, 0x60	; 96
    16ba:	8c 93       	st	X, r24
    if (!(PINB & (1 << PB6))) {// Check if increment seconds button is pressed
    16bc:	e6 e3       	ldi	r30, 0x36	; 54
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	80 74       	andi	r24, 0x40	; 64
    16c8:	90 70       	andi	r25, 0x00	; 0
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <adjust_seconds+0x44>
    16ce:	9a c0       	rjmp	.+308    	; 0x1804 <adjust_seconds+0x178>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a0 ef       	ldi	r26, 0xF0	; 240
    16d6:	b1 e4       	ldi	r27, 0x41	; 65
    16d8:	8f a3       	std	Y+39, r24	; 0x27
    16da:	98 a7       	std	Y+40, r25	; 0x28
    16dc:	a9 a7       	std	Y+41, r26	; 0x29
    16de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e0:	6f a1       	ldd	r22, Y+39	; 0x27
    16e2:	78 a5       	ldd	r23, Y+40	; 0x28
    16e4:	89 a5       	ldd	r24, Y+41	; 0x29
    16e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	4a e7       	ldi	r20, 0x7A	; 122
    16ee:	55 e4       	ldi	r21, 0x45	; 69
    16f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	8b a3       	std	Y+35, r24	; 0x23
    16fa:	9c a3       	std	Y+36, r25	; 0x24
    16fc:	ad a3       	std	Y+37, r26	; 0x25
    16fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1700:	6b a1       	ldd	r22, Y+35	; 0x23
    1702:	7c a1       	ldd	r23, Y+36	; 0x24
    1704:	8d a1       	ldd	r24, Y+37	; 0x25
    1706:	9e a1       	ldd	r25, Y+38	; 0x26
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e8       	ldi	r20, 0x80	; 128
    170e:	5f e3       	ldi	r21, 0x3F	; 63
    1710:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1714:	88 23       	and	r24, r24
    1716:	2c f4       	brge	.+10     	; 0x1722 <adjust_seconds+0x96>
		__ticks = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9a a3       	std	Y+34, r25	; 0x22
    171e:	89 a3       	std	Y+33, r24	; 0x21
    1720:	3f c0       	rjmp	.+126    	; 0x17a0 <adjust_seconds+0x114>
	else if (__tmp > 65535)
    1722:	6b a1       	ldd	r22, Y+35	; 0x23
    1724:	7c a1       	ldd	r23, Y+36	; 0x24
    1726:	8d a1       	ldd	r24, Y+37	; 0x25
    1728:	9e a1       	ldd	r25, Y+38	; 0x26
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	4f e7       	ldi	r20, 0x7F	; 127
    1730:	57 e4       	ldi	r21, 0x47	; 71
    1732:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1736:	18 16       	cp	r1, r24
    1738:	4c f5       	brge	.+82     	; 0x178c <adjust_seconds+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173a:	6f a1       	ldd	r22, Y+39	; 0x27
    173c:	78 a5       	ldd	r23, Y+40	; 0x28
    173e:	89 a5       	ldd	r24, Y+41	; 0x29
    1740:	9a a5       	ldd	r25, Y+42	; 0x2a
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e2       	ldi	r20, 0x20	; 32
    1748:	51 e4       	ldi	r21, 0x41	; 65
    174a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9a a3       	std	Y+34, r25	; 0x22
    1760:	89 a3       	std	Y+33, r24	; 0x21
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <adjust_seconds+0xf6>
    1764:	80 e9       	ldi	r24, 0x90	; 144
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	98 a3       	std	Y+32, r25	; 0x20
    176a:	8f 8f       	std	Y+31, r24	; 0x1f
    176c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    176e:	98 a1       	ldd	r25, Y+32	; 0x20
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <adjust_seconds+0xe4>
    1774:	98 a3       	std	Y+32, r25	; 0x20
    1776:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1778:	89 a1       	ldd	r24, Y+33	; 0x21
    177a:	9a a1       	ldd	r25, Y+34	; 0x22
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	9a a3       	std	Y+34, r25	; 0x22
    1780:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1782:	89 a1       	ldd	r24, Y+33	; 0x21
    1784:	9a a1       	ldd	r25, Y+34	; 0x22
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	69 f7       	brne	.-38     	; 0x1764 <adjust_seconds+0xd8>
    178a:	14 c0       	rjmp	.+40     	; 0x17b4 <adjust_seconds+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178c:	6b a1       	ldd	r22, Y+35	; 0x23
    178e:	7c a1       	ldd	r23, Y+36	; 0x24
    1790:	8d a1       	ldd	r24, Y+37	; 0x25
    1792:	9e a1       	ldd	r25, Y+38	; 0x26
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9a a3       	std	Y+34, r25	; 0x22
    179e:	89 a3       	std	Y+33, r24	; 0x21
    17a0:	89 a1       	ldd	r24, Y+33	; 0x21
    17a2:	9a a1       	ldd	r25, Y+34	; 0x22
    17a4:	9e 8f       	std	Y+30, r25	; 0x1e
    17a6:	8d 8f       	std	Y+29, r24	; 0x1d
    17a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <adjust_seconds+0x120>
    17b0:	9e 8f       	std	Y+30, r25	; 0x1e
    17b2:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(30);        // Debounce delay to prevent multiple increments
        if (!(PINB & (1 << PB6)) && second_increment_flag) {        // Confirm button press
    17b4:	e6 e3       	ldi	r30, 0x36	; 54
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	80 74       	andi	r24, 0x40	; 64
    17c0:	90 70       	andi	r25, 0x00	; 0
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	11 f5       	brne	.+68     	; 0x180a <adjust_seconds+0x17e>
    17c6:	80 91 6d 00 	lds	r24, 0x006D
    17ca:	88 23       	and	r24, r24
    17cc:	f1 f0       	breq	.+60     	; 0x180a <adjust_seconds+0x17e>
            second_increment_flag = 0;            // Reset increment flag
    17ce:	10 92 6d 00 	sts	0x006D, r1
            if (second_count1 == 9) {            // Check if second_count1 is 9
    17d2:	80 91 6e 00 	lds	r24, 0x006E
    17d6:	89 30       	cpi	r24, 0x09	; 9
    17d8:	79 f4       	brne	.+30     	; 0x17f8 <adjust_seconds+0x16c>
                second_count1 = 0;                // Reset second_count1
    17da:	10 92 6e 00 	sts	0x006E, r1
                if (second_count2 == 9) {                // Check if second_count2 is 9
    17de:	80 91 6f 00 	lds	r24, 0x006F
    17e2:	89 30       	cpi	r24, 0x09	; 9
    17e4:	19 f4       	brne	.+6      	; 0x17ec <adjust_seconds+0x160>
                    second_count2 = 0;                    // Reset second_count2
    17e6:	10 92 6f 00 	sts	0x006F, r1
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <adjust_seconds+0x17e>
                } else {
                    second_count2++;                    // Increment second_count2
    17ec:	80 91 6f 00 	lds	r24, 0x006F
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
    17f2:	80 93 6f 00 	sts	0x006F, r24
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <adjust_seconds+0x17e>
                }
            } else {
                second_count1++;                // Increment second_count1
    17f8:	80 91 6e 00 	lds	r24, 0x006E
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	80 93 6e 00 	sts	0x006E, r24
    1802:	03 c0       	rjmp	.+6      	; 0x180a <adjust_seconds+0x17e>
            }
        }
    } else {
        second_increment_flag = 1; // Set increment flag when button is not pressed
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	80 93 6d 00 	sts	0x006D, r24
    }


    if (!(PINB & (1 << PB5))) { // Check if decrement seconds button is pressed
    180a:	e6 e3       	ldi	r30, 0x36	; 54
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	80 72       	andi	r24, 0x20	; 32
    1816:	90 70       	andi	r25, 0x00	; 0
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	09 f0       	breq	.+2      	; 0x181e <adjust_seconds+0x192>
    181c:	9c c0       	rjmp	.+312    	; 0x1956 <adjust_seconds+0x2ca>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 ef       	ldi	r26, 0xF0	; 240
    1824:	b1 e4       	ldi	r27, 0x41	; 65
    1826:	89 8f       	std	Y+25, r24	; 0x19
    1828:	9a 8f       	std	Y+26, r25	; 0x1a
    182a:	ab 8f       	std	Y+27, r26	; 0x1b
    182c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182e:	69 8d       	ldd	r22, Y+25	; 0x19
    1830:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1832:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1834:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	4a e7       	ldi	r20, 0x7A	; 122
    183c:	55 e4       	ldi	r21, 0x45	; 69
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	8d 8b       	std	Y+21, r24	; 0x15
    1848:	9e 8b       	std	Y+22, r25	; 0x16
    184a:	af 8b       	std	Y+23, r26	; 0x17
    184c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    184e:	6d 89       	ldd	r22, Y+21	; 0x15
    1850:	7e 89       	ldd	r23, Y+22	; 0x16
    1852:	8f 89       	ldd	r24, Y+23	; 0x17
    1854:	98 8d       	ldd	r25, Y+24	; 0x18
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e8       	ldi	r20, 0x80	; 128
    185c:	5f e3       	ldi	r21, 0x3F	; 63
    185e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1862:	88 23       	and	r24, r24
    1864:	2c f4       	brge	.+10     	; 0x1870 <adjust_seconds+0x1e4>
		__ticks = 1;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9c 8b       	std	Y+20, r25	; 0x14
    186c:	8b 8b       	std	Y+19, r24	; 0x13
    186e:	3f c0       	rjmp	.+126    	; 0x18ee <adjust_seconds+0x262>
	else if (__tmp > 65535)
    1870:	6d 89       	ldd	r22, Y+21	; 0x15
    1872:	7e 89       	ldd	r23, Y+22	; 0x16
    1874:	8f 89       	ldd	r24, Y+23	; 0x17
    1876:	98 8d       	ldd	r25, Y+24	; 0x18
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	3f ef       	ldi	r19, 0xFF	; 255
    187c:	4f e7       	ldi	r20, 0x7F	; 127
    187e:	57 e4       	ldi	r21, 0x47	; 71
    1880:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1884:	18 16       	cp	r1, r24
    1886:	4c f5       	brge	.+82     	; 0x18da <adjust_seconds+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1888:	69 8d       	ldd	r22, Y+25	; 0x19
    188a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    188e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e2       	ldi	r20, 0x20	; 32
    1896:	51 e4       	ldi	r21, 0x41	; 65
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9c 8b       	std	Y+20, r25	; 0x14
    18ae:	8b 8b       	std	Y+19, r24	; 0x13
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <adjust_seconds+0x244>
    18b2:	80 e9       	ldi	r24, 0x90	; 144
    18b4:	91 e0       	ldi	r25, 0x01	; 1
    18b6:	9a 8b       	std	Y+18, r25	; 0x12
    18b8:	89 8b       	std	Y+17, r24	; 0x11
    18ba:	89 89       	ldd	r24, Y+17	; 0x11
    18bc:	9a 89       	ldd	r25, Y+18	; 0x12
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <adjust_seconds+0x232>
    18c2:	9a 8b       	std	Y+18, r25	; 0x12
    18c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c6:	8b 89       	ldd	r24, Y+19	; 0x13
    18c8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	9c 8b       	std	Y+20, r25	; 0x14
    18ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d0:	8b 89       	ldd	r24, Y+19	; 0x13
    18d2:	9c 89       	ldd	r25, Y+20	; 0x14
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	69 f7       	brne	.-38     	; 0x18b2 <adjust_seconds+0x226>
    18d8:	14 c0       	rjmp	.+40     	; 0x1902 <adjust_seconds+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18da:	6d 89       	ldd	r22, Y+21	; 0x15
    18dc:	7e 89       	ldd	r23, Y+22	; 0x16
    18de:	8f 89       	ldd	r24, Y+23	; 0x17
    18e0:	98 8d       	ldd	r25, Y+24	; 0x18
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	9c 8b       	std	Y+20, r25	; 0x14
    18ec:	8b 8b       	std	Y+19, r24	; 0x13
    18ee:	8b 89       	ldd	r24, Y+19	; 0x13
    18f0:	9c 89       	ldd	r25, Y+20	; 0x14
    18f2:	98 8b       	std	Y+16, r25	; 0x10
    18f4:	8f 87       	std	Y+15, r24	; 0x0f
    18f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f8:	98 89       	ldd	r25, Y+16	; 0x10
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <adjust_seconds+0x26e>
    18fe:	98 8b       	std	Y+16, r25	; 0x10
    1900:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(30);  // Debounce delay to prevent multiple decrements
        if (!(PINB & (1 << PB5)) && second_decrement_flag) {// Confirm button press
    1902:	e6 e3       	ldi	r30, 0x36	; 54
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	80 72       	andi	r24, 0x20	; 32
    190e:	90 70       	andi	r25, 0x00	; 0
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	21 f5       	brne	.+72     	; 0x195c <adjust_seconds+0x2d0>
    1914:	80 91 6c 00 	lds	r24, 0x006C
    1918:	88 23       	and	r24, r24
    191a:	01 f1       	breq	.+64     	; 0x195c <adjust_seconds+0x2d0>
            second_decrement_flag = 0;// Reset decrement flag
    191c:	10 92 6c 00 	sts	0x006C, r1
            if (second_count1 == 0) {// Check if second_count1 is 0
    1920:	80 91 6e 00 	lds	r24, 0x006E
    1924:	88 23       	and	r24, r24
    1926:	89 f4       	brne	.+34     	; 0x194a <adjust_seconds+0x2be>
                second_count1 = 9;  // Reset second_count1
    1928:	89 e0       	ldi	r24, 0x09	; 9
    192a:	80 93 6e 00 	sts	0x006E, r24
                if (second_count2 == 0) {// Check if second_count2 is 0
    192e:	80 91 6f 00 	lds	r24, 0x006F
    1932:	88 23       	and	r24, r24
    1934:	21 f4       	brne	.+8      	; 0x193e <adjust_seconds+0x2b2>
                    second_count2 = 9;// Reset second_count2
    1936:	89 e0       	ldi	r24, 0x09	; 9
    1938:	80 93 6f 00 	sts	0x006F, r24
    193c:	0f c0       	rjmp	.+30     	; 0x195c <adjust_seconds+0x2d0>
                } else {
                    second_count2--;  // Decrement second_count2
    193e:	80 91 6f 00 	lds	r24, 0x006F
    1942:	81 50       	subi	r24, 0x01	; 1
    1944:	80 93 6f 00 	sts	0x006F, r24
    1948:	09 c0       	rjmp	.+18     	; 0x195c <adjust_seconds+0x2d0>
                }
            } else {
                second_count1--; // Decrement second_count1
    194a:	80 91 6e 00 	lds	r24, 0x006E
    194e:	81 50       	subi	r24, 0x01	; 1
    1950:	80 93 6e 00 	sts	0x006E, r24
    1954:	03 c0       	rjmp	.+6      	; 0x195c <adjust_seconds+0x2d0>
            }
        }
    } else {
        second_decrement_flag = 1;// Set decrement flag when button is not pressed
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	80 93 6c 00 	sts	0x006C, r24
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a0 e2       	ldi	r26, 0x20	; 32
    1962:	b1 e4       	ldi	r27, 0x41	; 65
    1964:	8b 87       	std	Y+11, r24	; 0x0b
    1966:	9c 87       	std	Y+12, r25	; 0x0c
    1968:	ad 87       	std	Y+13, r26	; 0x0d
    196a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	6b 85       	ldd	r22, Y+11	; 0x0b
    196e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1970:	8d 85       	ldd	r24, Y+13	; 0x0d
    1972:	9e 85       	ldd	r25, Y+14	; 0x0e
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4a e7       	ldi	r20, 0x7A	; 122
    197a:	55 e4       	ldi	r21, 0x45	; 69
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8f 83       	std	Y+7, r24	; 0x07
    1986:	98 87       	std	Y+8, r25	; 0x08
    1988:	a9 87       	std	Y+9, r26	; 0x09
    198a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	2c f4       	brge	.+10     	; 0x19ae <adjust_seconds+0x322>
		__ticks = 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9e 83       	std	Y+6, r25	; 0x06
    19aa:	8d 83       	std	Y+5, r24	; 0x05
    19ac:	3f c0       	rjmp	.+126    	; 0x1a2c <adjust_seconds+0x3a0>
	else if (__tmp > 65535)
    19ae:	6f 81       	ldd	r22, Y+7	; 0x07
    19b0:	78 85       	ldd	r23, Y+8	; 0x08
    19b2:	89 85       	ldd	r24, Y+9	; 0x09
    19b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c2:	18 16       	cp	r1, r24
    19c4:	4c f5       	brge	.+82     	; 0x1a18 <adjust_seconds+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    19cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	9e 83       	std	Y+6, r25	; 0x06
    19ec:	8d 83       	std	Y+5, r24	; 0x05
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <adjust_seconds+0x382>
    19f0:	80 e9       	ldi	r24, 0x90	; 144
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	9c 83       	std	Y+4, r25	; 0x04
    19f6:	8b 83       	std	Y+3, r24	; 0x03
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <adjust_seconds+0x370>
    1a00:	9c 83       	std	Y+4, r25	; 0x04
    1a02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f7       	brne	.-38     	; 0x19f0 <adjust_seconds+0x364>
    1a16:	14 c0       	rjmp	.+40     	; 0x1a40 <adjust_seconds+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1a:	78 85       	ldd	r23, Y+8	; 0x08
    1a1c:	89 85       	ldd	r24, Y+9	; 0x09
    1a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <adjust_seconds+0x3ac>
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    }
    _delay_ms(10);  // Add a delay to avoid busy-waiting
}
    1a40:	aa 96       	adiw	r28, 0x2a	; 42
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <main>:

int main (void){
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	c4 55       	subi	r28, 0x54	; 84
    1a60:	d0 40       	sbci	r29, 0x00	; 0
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61

    Timer1_Init_CTC_Mode();// Initialize Timer1 in CTC mode
    1a6c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer1_Init_CTC_Mode>
    INT0_Init();// Initialize INT0 interrupt
    1a70:	0e 94 94 06 	call	0xd28	; 0xd28 <INT0_Init>
    INT1_Init(); // Initialize INT1 interrupt
    1a74:	0e 94 d3 06 	call	0xda6	; 0xda6 <INT1_Init>
    INT2_Init();   // Initialize INT2 interrupt
    1a78:	0e 94 04 07 	call	0xe08	; 0xe08 <INT2_Init>
    SREG |= 1<<7;// Enable global interrupts
    1a7c:	af e5       	ldi	r26, 0x5F	; 95
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ef e5       	ldi	r30, 0x5F	; 95
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	80 68       	ori	r24, 0x80	; 128
    1a88:	8c 93       	st	X, r24
    DDRC  |= 0x0F;// Configure the first four pins in PORTC as output pins
    1a8a:	a4 e3       	ldi	r26, 0x34	; 52
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e4 e3       	ldi	r30, 0x34	; 52
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8f 60       	ori	r24, 0x0F	; 15
    1a96:	8c 93       	st	X, r24
    DDRA  |= 0x3F;// Configure the first six pins in PORTA as output pins
    1a98:	aa e3       	ldi	r26, 0x3A	; 58
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	ea e3       	ldi	r30, 0x3A	; 58
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8f 63       	ori	r24, 0x3F	; 63
    1aa4:	8c 93       	st	X, r24
    // Initialize PORTC and PORTA
    PORTC &= 0xF0;
    1aa6:	a5 e3       	ldi	r26, 0x35	; 53
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e5 e3       	ldi	r30, 0x35	; 53
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	80 7f       	andi	r24, 0xF0	; 240
    1ab2:	8c 93       	st	X, r24
    PORTA &= 0xC0;
    1ab4:	ab e3       	ldi	r26, 0x3B	; 59
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	eb e3       	ldi	r30, 0x3B	; 59
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	80 7c       	andi	r24, 0xC0	; 192
    1ac0:	8c 93       	st	X, r24
    DDRD |= (1<<PD4) |(1<<PD5) | (1<<PD0);    // Configure PD4, PD5, and PD0 as output pins
    1ac2:	a1 e3       	ldi	r26, 0x31	; 49
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e1 e3       	ldi	r30, 0x31	; 49
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	81 63       	ori	r24, 0x31	; 49
    1ace:	8c 93       	st	X, r24
    while(1) {
        // Display the seconds on PORTC
        // Clear the lower 6 bits of PORTA and set PA5 high
        PORTA = (PORTA & 0xC0) | 1<<PA5;
    1ad0:	ab e3       	ldi	r26, 0x3B	; 59
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	eb e3       	ldi	r30, 0x3B	; 59
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	80 7c       	andi	r24, 0xC0	; 192
    1adc:	80 62       	ori	r24, 0x20	; 32
    1ade:	8c 93       	st	X, r24
        PORTC = (PORTC & 0xF0) | second_count1;        // Display the ones digit of the seconds on PORTC
    1ae0:	a5 e3       	ldi	r26, 0x35	; 53
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e5 e3       	ldi	r30, 0x35	; 53
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	98 2f       	mov	r25, r24
    1aec:	90 7f       	andi	r25, 0xF0	; 240
    1aee:	80 91 6e 00 	lds	r24, 0x006E
    1af2:	89 2b       	or	r24, r25
    1af4:	8c 93       	st	X, r24
    1af6:	fe 01       	movw	r30, r28
    1af8:	ef 5a       	subi	r30, 0xAF	; 175
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a0 e8       	ldi	r26, 0x80	; 128
    1b02:	bf e3       	ldi	r27, 0x3F	; 63
    1b04:	80 83       	st	Z, r24
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	a2 83       	std	Z+2, r26	; 0x02
    1b0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0c:	8e 01       	movw	r16, r28
    1b0e:	03 5b       	subi	r16, 0xB3	; 179
    1b10:	1f 4f       	sbci	r17, 0xFF	; 255
    1b12:	fe 01       	movw	r30, r28
    1b14:	ef 5a       	subi	r30, 0xAF	; 175
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	60 81       	ld	r22, Z
    1b1a:	71 81       	ldd	r23, Z+1	; 0x01
    1b1c:	82 81       	ldd	r24, Z+2	; 0x02
    1b1e:	93 81       	ldd	r25, Z+3	; 0x03
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a e7       	ldi	r20, 0x7A	; 122
    1b26:	55 e4       	ldi	r21, 0x45	; 69
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	f8 01       	movw	r30, r16
    1b32:	80 83       	st	Z, r24
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	a2 83       	std	Z+2, r26	; 0x02
    1b38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e3 5b       	subi	r30, 0xB3	; 179
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	60 81       	ld	r22, Z
    1b42:	71 81       	ldd	r23, Z+1	; 0x01
    1b44:	82 81       	ldd	r24, Z+2	; 0x02
    1b46:	93 81       	ldd	r25, Z+3	; 0x03
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e8       	ldi	r20, 0x80	; 128
    1b4e:	5f e3       	ldi	r21, 0x3F	; 63
    1b50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	44 f4       	brge	.+16     	; 0x1b68 <main+0x116>
		__ticks = 1;
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e5 5b       	subi	r30, 0xB5	; 181
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	80 83       	st	Z, r24
    1b66:	64 c0       	rjmp	.+200    	; 0x1c30 <main+0x1de>
	else if (__tmp > 65535)
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e3 5b       	subi	r30, 0xB3	; 179
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	60 81       	ld	r22, Z
    1b70:	71 81       	ldd	r23, Z+1	; 0x01
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	3f ef       	ldi	r19, 0xFF	; 255
    1b7a:	4f e7       	ldi	r20, 0x7F	; 127
    1b7c:	57 e4       	ldi	r21, 0x47	; 71
    1b7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	0c f0       	brlt	.+2      	; 0x1b88 <main+0x136>
    1b86:	43 c0       	rjmp	.+134    	; 0x1c0e <main+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ef 5a       	subi	r30, 0xAF	; 175
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	60 81       	ld	r22, Z
    1b90:	71 81       	ldd	r23, Z+1	; 0x01
    1b92:	82 81       	ldd	r24, Z+2	; 0x02
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e2       	ldi	r20, 0x20	; 32
    1b9c:	51 e4       	ldi	r21, 0x41	; 65
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8e 01       	movw	r16, r28
    1ba8:	05 5b       	subi	r16, 0xB5	; 181
    1baa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bac:	bc 01       	movw	r22, r24
    1bae:	cd 01       	movw	r24, r26
    1bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	f8 01       	movw	r30, r16
    1bba:	91 83       	std	Z+1, r25	; 0x01
    1bbc:	80 83       	st	Z, r24
    1bbe:	1f c0       	rjmp	.+62     	; 0x1bfe <main+0x1ac>
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	e7 5b       	subi	r30, 0xB7	; 183
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	80 e9       	ldi	r24, 0x90	; 144
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	80 83       	st	Z, r24
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e7 5b       	subi	r30, 0xB7	; 183
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 81       	ld	r24, Z
    1bd6:	91 81       	ldd	r25, Z+1	; 0x01
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <main+0x186>
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e7 5b       	subi	r30, 0xB7	; 183
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be6:	de 01       	movw	r26, r28
    1be8:	a5 5b       	subi	r26, 0xB5	; 181
    1bea:	bf 4f       	sbci	r27, 0xFF	; 255
    1bec:	fe 01       	movw	r30, r28
    1bee:	e5 5b       	subi	r30, 0xB5	; 181
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	91 81       	ldd	r25, Z+1	; 0x01
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	11 96       	adiw	r26, 0x01	; 1
    1bfa:	9c 93       	st	X, r25
    1bfc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e5 5b       	subi	r30, 0xB5	; 181
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 81       	ld	r24, Z
    1c06:	91 81       	ldd	r25, Z+1	; 0x01
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	d1 f6       	brne	.-76     	; 0x1bc0 <main+0x16e>
    1c0c:	27 c0       	rjmp	.+78     	; 0x1c5c <main+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	8e 01       	movw	r16, r28
    1c10:	05 5b       	subi	r16, 0xB5	; 181
    1c12:	1f 4f       	sbci	r17, 0xFF	; 255
    1c14:	fe 01       	movw	r30, r28
    1c16:	e3 5b       	subi	r30, 0xB3	; 179
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	60 81       	ld	r22, Z
    1c1c:	71 81       	ldd	r23, Z+1	; 0x01
    1c1e:	82 81       	ldd	r24, Z+2	; 0x02
    1c20:	93 81       	ldd	r25, Z+3	; 0x03
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	80 83       	st	Z, r24
    1c30:	de 01       	movw	r26, r28
    1c32:	a9 5b       	subi	r26, 0xB9	; 185
    1c34:	bf 4f       	sbci	r27, 0xFF	; 255
    1c36:	fe 01       	movw	r30, r28
    1c38:	e5 5b       	subi	r30, 0xB5	; 181
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	8d 93       	st	X+, r24
    1c42:	9c 93       	st	X, r25
    1c44:	fe 01       	movw	r30, r28
    1c46:	e9 5b       	subi	r30, 0xB9	; 185
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <main+0x1fc>
    1c52:	fe 01       	movw	r30, r28
    1c54:	e9 5b       	subi	r30, 0xB9	; 185
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
        _delay_ms(1);        // Delay for 1 millisecond
        // Display the tens digit of the seconds on PORTC
        // Clear the lower 6 bits of PORTA and set PA4 high
        PORTA = (PORTA & 0xC0) | 1<<PA4;
    1c5c:	ab e3       	ldi	r26, 0x3B	; 59
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	eb e3       	ldi	r30, 0x3B	; 59
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	80 7c       	andi	r24, 0xC0	; 192
    1c68:	80 61       	ori	r24, 0x10	; 16
    1c6a:	8c 93       	st	X, r24
        PORTC = (PORTC & 0xF0) | second_count2;
    1c6c:	a5 e3       	ldi	r26, 0x35	; 53
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e5 e3       	ldi	r30, 0x35	; 53
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	98 2f       	mov	r25, r24
    1c78:	90 7f       	andi	r25, 0xF0	; 240
    1c7a:	80 91 6f 00 	lds	r24, 0x006F
    1c7e:	89 2b       	or	r24, r25
    1c80:	8c 93       	st	X, r24
    1c82:	fe 01       	movw	r30, r28
    1c84:	ed 5b       	subi	r30, 0xBD	; 189
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a0 e4       	ldi	r26, 0x40	; 64
    1c8e:	b0 e4       	ldi	r27, 0x40	; 64
    1c90:	80 83       	st	Z, r24
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	a2 83       	std	Z+2, r26	; 0x02
    1c96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c98:	8e 01       	movw	r16, r28
    1c9a:	01 5c       	subi	r16, 0xC1	; 193
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ed 5b       	subi	r30, 0xBD	; 189
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	60 81       	ld	r22, Z
    1ca6:	71 81       	ldd	r23, Z+1	; 0x01
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4a e7       	ldi	r20, 0x7A	; 122
    1cb2:	55 e4       	ldi	r21, 0x45	; 69
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	80 83       	st	Z, r24
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	a2 83       	std	Z+2, r26	; 0x02
    1cc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	ff 96       	adiw	r30, 0x3f	; 63
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	5f e3       	ldi	r21, 0x3F	; 63
    1cda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cde:	88 23       	and	r24, r24
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <main+0x29a>
		__ticks = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9e af       	std	Y+62, r25	; 0x3e
    1ce8:	8d af       	std	Y+61, r24	; 0x3d
    1cea:	46 c0       	rjmp	.+140    	; 0x1d78 <main+0x326>
	else if (__tmp > 65535)
    1cec:	fe 01       	movw	r30, r28
    1cee:	ff 96       	adiw	r30, 0x3f	; 63
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d04:	18 16       	cp	r1, r24
    1d06:	64 f5       	brge	.+88     	; 0x1d60 <main+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	fe 01       	movw	r30, r28
    1d0a:	ed 5b       	subi	r30, 0xBD	; 189
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	60 81       	ld	r22, Z
    1d10:	71 81       	ldd	r23, Z+1	; 0x01
    1d12:	82 81       	ldd	r24, Z+2	; 0x02
    1d14:	93 81       	ldd	r25, Z+3	; 0x03
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e2       	ldi	r20, 0x20	; 32
    1d1c:	51 e4       	ldi	r21, 0x41	; 65
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	bc 01       	movw	r22, r24
    1d28:	cd 01       	movw	r24, r26
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9e af       	std	Y+62, r25	; 0x3e
    1d34:	8d af       	std	Y+61, r24	; 0x3d
    1d36:	0f c0       	rjmp	.+30     	; 0x1d56 <main+0x304>
    1d38:	80 e9       	ldi	r24, 0x90	; 144
    1d3a:	91 e0       	ldi	r25, 0x01	; 1
    1d3c:	9c af       	std	Y+60, r25	; 0x3c
    1d3e:	8b af       	std	Y+59, r24	; 0x3b
    1d40:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d42:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <main+0x2f2>
    1d48:	9c af       	std	Y+60, r25	; 0x3c
    1d4a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	9e af       	std	Y+62, r25	; 0x3e
    1d54:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	69 f7       	brne	.-38     	; 0x1d38 <main+0x2e6>
    1d5e:	16 c0       	rjmp	.+44     	; 0x1d8c <main+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d60:	fe 01       	movw	r30, r28
    1d62:	ff 96       	adiw	r30, 0x3f	; 63
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9e af       	std	Y+62, r25	; 0x3e
    1d76:	8d af       	std	Y+61, r24	; 0x3d
    1d78:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d7c:	9a af       	std	Y+58, r25	; 0x3a
    1d7e:	89 af       	std	Y+57, r24	; 0x39
    1d80:	89 ad       	ldd	r24, Y+57	; 0x39
    1d82:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <main+0x332>
    1d88:	9a af       	std	Y+58, r25	; 0x3a
    1d8a:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(3);        // Delay for 1 millisecond
        // Display the minutes on PORTC
        // Clear the lower 6 bits of PORTA and set PA3 high
        PORTA = (PORTA & 0xC0) | 1<<PA3;
    1d8c:	ab e3       	ldi	r26, 0x3B	; 59
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	eb e3       	ldi	r30, 0x3B	; 59
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	80 7c       	andi	r24, 0xC0	; 192
    1d98:	88 60       	ori	r24, 0x08	; 8
    1d9a:	8c 93       	st	X, r24
        PORTC = (PORTC & 0xF0) | minutes_count1;// Display the ones digit of the minutes on PORTC
    1d9c:	a5 e3       	ldi	r26, 0x35	; 53
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e5 e3       	ldi	r30, 0x35	; 53
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	98 2f       	mov	r25, r24
    1da8:	90 7f       	andi	r25, 0xF0	; 240
    1daa:	80 91 70 00 	lds	r24, 0x0070
    1dae:	89 2b       	or	r24, r25
    1db0:	8c 93       	st	X, r24
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a0 e4       	ldi	r26, 0x40	; 64
    1db8:	b0 e4       	ldi	r27, 0x40	; 64
    1dba:	8d ab       	std	Y+53, r24	; 0x35
    1dbc:	9e ab       	std	Y+54, r25	; 0x36
    1dbe:	af ab       	std	Y+55, r26	; 0x37
    1dc0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc2:	6d a9       	ldd	r22, Y+53	; 0x35
    1dc4:	7e a9       	ldd	r23, Y+54	; 0x36
    1dc6:	8f a9       	ldd	r24, Y+55	; 0x37
    1dc8:	98 ad       	ldd	r25, Y+56	; 0x38
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a e7       	ldi	r20, 0x7A	; 122
    1dd0:	55 e4       	ldi	r21, 0x45	; 69
    1dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	89 ab       	std	Y+49, r24	; 0x31
    1ddc:	9a ab       	std	Y+50, r25	; 0x32
    1dde:	ab ab       	std	Y+51, r26	; 0x33
    1de0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1de2:	69 a9       	ldd	r22, Y+49	; 0x31
    1de4:	7a a9       	ldd	r23, Y+50	; 0x32
    1de6:	8b a9       	ldd	r24, Y+51	; 0x33
    1de8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e8       	ldi	r20, 0x80	; 128
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df6:	88 23       	and	r24, r24
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <main+0x3b2>
		__ticks = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	98 ab       	std	Y+48, r25	; 0x30
    1e00:	8f a7       	std	Y+47, r24	; 0x2f
    1e02:	3f c0       	rjmp	.+126    	; 0x1e82 <main+0x430>
	else if (__tmp > 65535)
    1e04:	69 a9       	ldd	r22, Y+49	; 0x31
    1e06:	7a a9       	ldd	r23, Y+50	; 0x32
    1e08:	8b a9       	ldd	r24, Y+51	; 0x33
    1e0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	3f ef       	ldi	r19, 0xFF	; 255
    1e10:	4f e7       	ldi	r20, 0x7F	; 127
    1e12:	57 e4       	ldi	r21, 0x47	; 71
    1e14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e18:	18 16       	cp	r1, r24
    1e1a:	4c f5       	brge	.+82     	; 0x1e6e <main+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e20:	8f a9       	ldd	r24, Y+55	; 0x37
    1e22:	98 ad       	ldd	r25, Y+56	; 0x38
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	98 ab       	std	Y+48, r25	; 0x30
    1e42:	8f a7       	std	Y+47, r24	; 0x2f
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <main+0x412>
    1e46:	80 e9       	ldi	r24, 0x90	; 144
    1e48:	91 e0       	ldi	r25, 0x01	; 1
    1e4a:	9e a7       	std	Y+46, r25	; 0x2e
    1e4c:	8d a7       	std	Y+45, r24	; 0x2d
    1e4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e50:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <main+0x400>
    1e56:	9e a7       	std	Y+46, r25	; 0x2e
    1e58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	98 ab       	std	Y+48, r25	; 0x30
    1e62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e66:	98 a9       	ldd	r25, Y+48	; 0x30
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	69 f7       	brne	.-38     	; 0x1e46 <main+0x3f4>
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <main+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e70:	7a a9       	ldd	r23, Y+50	; 0x32
    1e72:	8b a9       	ldd	r24, Y+51	; 0x33
    1e74:	9c a9       	ldd	r25, Y+52	; 0x34
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	98 ab       	std	Y+48, r25	; 0x30
    1e80:	8f a7       	std	Y+47, r24	; 0x2f
    1e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e84:	98 a9       	ldd	r25, Y+48	; 0x30
    1e86:	9c a7       	std	Y+44, r25	; 0x2c
    1e88:	8b a7       	std	Y+43, r24	; 0x2b
    1e8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <main+0x43c>
    1e92:	9c a7       	std	Y+44, r25	; 0x2c
    1e94:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(3);        // Delay for 1 millisecond
        // Display the tens digit of the minutes on PORTC
        // Clear the lower 6 bits of PORTA and set PA2 high
        PORTA = (PORTA & 0xC0) | 1<<PA2;
    1e96:	ab e3       	ldi	r26, 0x3B	; 59
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	eb e3       	ldi	r30, 0x3B	; 59
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	80 7c       	andi	r24, 0xC0	; 192
    1ea2:	84 60       	ori	r24, 0x04	; 4
    1ea4:	8c 93       	st	X, r24
        PORTC = (PORTC & 0xF0) | minutes_count2;        // Display the tens digit of the minutes on PORTC
    1ea6:	a5 e3       	ldi	r26, 0x35	; 53
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e5 e3       	ldi	r30, 0x35	; 53
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	98 2f       	mov	r25, r24
    1eb2:	90 7f       	andi	r25, 0xF0	; 240
    1eb4:	80 91 71 00 	lds	r24, 0x0071
    1eb8:	89 2b       	or	r24, r25
    1eba:	8c 93       	st	X, r24
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e4       	ldi	r26, 0x40	; 64
    1ec2:	b0 e4       	ldi	r27, 0x40	; 64
    1ec4:	8f a3       	std	Y+39, r24	; 0x27
    1ec6:	98 a7       	std	Y+40, r25	; 0x28
    1ec8:	a9 a7       	std	Y+41, r26	; 0x29
    1eca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ecc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ece:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4a e7       	ldi	r20, 0x7A	; 122
    1eda:	55 e4       	ldi	r21, 0x45	; 69
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	8b a3       	std	Y+35, r24	; 0x23
    1ee6:	9c a3       	std	Y+36, r25	; 0x24
    1ee8:	ad a3       	std	Y+37, r26	; 0x25
    1eea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eec:	6b a1       	ldd	r22, Y+35	; 0x23
    1eee:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	2c f4       	brge	.+10     	; 0x1f0e <main+0x4bc>
		__ticks = 1;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9a a3       	std	Y+34, r25	; 0x22
    1f0a:	89 a3       	std	Y+33, r24	; 0x21
    1f0c:	3f c0       	rjmp	.+126    	; 0x1f8c <main+0x53a>
	else if (__tmp > 65535)
    1f0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f10:	7c a1       	ldd	r23, Y+36	; 0x24
    1f12:	8d a1       	ldd	r24, Y+37	; 0x25
    1f14:	9e a1       	ldd	r25, Y+38	; 0x26
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	4f e7       	ldi	r20, 0x7F	; 127
    1f1c:	57 e4       	ldi	r21, 0x47	; 71
    1f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f22:	18 16       	cp	r1, r24
    1f24:	4c f5       	brge	.+82     	; 0x1f78 <main+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f26:	6f a1       	ldd	r22, Y+39	; 0x27
    1f28:	78 a5       	ldd	r23, Y+40	; 0x28
    1f2a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e2       	ldi	r20, 0x20	; 32
    1f34:	51 e4       	ldi	r21, 0x41	; 65
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	bc 01       	movw	r22, r24
    1f40:	cd 01       	movw	r24, r26
    1f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	9a a3       	std	Y+34, r25	; 0x22
    1f4c:	89 a3       	std	Y+33, r24	; 0x21
    1f4e:	0f c0       	rjmp	.+30     	; 0x1f6e <main+0x51c>
    1f50:	80 e9       	ldi	r24, 0x90	; 144
    1f52:	91 e0       	ldi	r25, 0x01	; 1
    1f54:	98 a3       	std	Y+32, r25	; 0x20
    1f56:	8f 8f       	std	Y+31, r24	; 0x1f
    1f58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f5a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <main+0x50a>
    1f60:	98 a3       	std	Y+32, r25	; 0x20
    1f62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f64:	89 a1       	ldd	r24, Y+33	; 0x21
    1f66:	9a a1       	ldd	r25, Y+34	; 0x22
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	9a a3       	std	Y+34, r25	; 0x22
    1f6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f70:	9a a1       	ldd	r25, Y+34	; 0x22
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	69 f7       	brne	.-38     	; 0x1f50 <main+0x4fe>
    1f76:	14 c0       	rjmp	.+40     	; 0x1fa0 <main+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f78:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	9a a3       	std	Y+34, r25	; 0x22
    1f8a:	89 a3       	std	Y+33, r24	; 0x21
    1f8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f90:	9e 8f       	std	Y+30, r25	; 0x1e
    1f92:	8d 8f       	std	Y+29, r24	; 0x1d
    1f94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <main+0x546>
    1f9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9e:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(3);         // Delay for 1 millisecond
        // Display the hours on PORTC
        // Clear the lower 6 bits of PORTA and set PA1 high
        PORTA = (PORTA & 0xC0) | 1<<PA1;
    1fa0:	ab e3       	ldi	r26, 0x3B	; 59
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	eb e3       	ldi	r30, 0x3B	; 59
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	80 7c       	andi	r24, 0xC0	; 192
    1fac:	82 60       	ori	r24, 0x02	; 2
    1fae:	8c 93       	st	X, r24
        PORTC = (PORTC & 0xF0) | hours_count1;        // Display the ones digit of the hours on PORTC
    1fb0:	a5 e3       	ldi	r26, 0x35	; 53
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e5 e3       	ldi	r30, 0x35	; 53
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	98 2f       	mov	r25, r24
    1fbc:	90 7f       	andi	r25, 0xF0	; 240
    1fbe:	80 91 72 00 	lds	r24, 0x0072
    1fc2:	89 2b       	or	r24, r25
    1fc4:	8c 93       	st	X, r24
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a0 e4       	ldi	r26, 0x40	; 64
    1fcc:	b0 e4       	ldi	r27, 0x40	; 64
    1fce:	89 8f       	std	Y+25, r24	; 0x19
    1fd0:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd2:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	4a e7       	ldi	r20, 0x7A	; 122
    1fe4:	55 e4       	ldi	r21, 0x45	; 69
    1fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8d 8b       	std	Y+21, r24	; 0x15
    1ff0:	9e 8b       	std	Y+22, r25	; 0x16
    1ff2:	af 8b       	std	Y+23, r26	; 0x17
    1ff4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e8       	ldi	r20, 0x80	; 128
    2004:	5f e3       	ldi	r21, 0x3F	; 63
    2006:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    200a:	88 23       	and	r24, r24
    200c:	2c f4       	brge	.+10     	; 0x2018 <main+0x5c6>
		__ticks = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	9c 8b       	std	Y+20, r25	; 0x14
    2014:	8b 8b       	std	Y+19, r24	; 0x13
    2016:	3f c0       	rjmp	.+126    	; 0x2096 <main+0x644>
	else if (__tmp > 65535)
    2018:	6d 89       	ldd	r22, Y+21	; 0x15
    201a:	7e 89       	ldd	r23, Y+22	; 0x16
    201c:	8f 89       	ldd	r24, Y+23	; 0x17
    201e:	98 8d       	ldd	r25, Y+24	; 0x18
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	3f ef       	ldi	r19, 0xFF	; 255
    2024:	4f e7       	ldi	r20, 0x7F	; 127
    2026:	57 e4       	ldi	r21, 0x47	; 71
    2028:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202c:	18 16       	cp	r1, r24
    202e:	4c f5       	brge	.+82     	; 0x2082 <main+0x630>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2030:	69 8d       	ldd	r22, Y+25	; 0x19
    2032:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2034:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2036:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e2       	ldi	r20, 0x20	; 32
    203e:	51 e4       	ldi	r21, 0x41	; 65
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9c 8b       	std	Y+20, r25	; 0x14
    2056:	8b 8b       	std	Y+19, r24	; 0x13
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <main+0x626>
    205a:	80 e9       	ldi	r24, 0x90	; 144
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	9a 8b       	std	Y+18, r25	; 0x12
    2060:	89 8b       	std	Y+17, r24	; 0x11
    2062:	89 89       	ldd	r24, Y+17	; 0x11
    2064:	9a 89       	ldd	r25, Y+18	; 0x12
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <main+0x614>
    206a:	9a 8b       	std	Y+18, r25	; 0x12
    206c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206e:	8b 89       	ldd	r24, Y+19	; 0x13
    2070:	9c 89       	ldd	r25, Y+20	; 0x14
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	9c 8b       	std	Y+20, r25	; 0x14
    2076:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	8b 89       	ldd	r24, Y+19	; 0x13
    207a:	9c 89       	ldd	r25, Y+20	; 0x14
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	69 f7       	brne	.-38     	; 0x205a <main+0x608>
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <main+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2082:	6d 89       	ldd	r22, Y+21	; 0x15
    2084:	7e 89       	ldd	r23, Y+22	; 0x16
    2086:	8f 89       	ldd	r24, Y+23	; 0x17
    2088:	98 8d       	ldd	r25, Y+24	; 0x18
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9c 8b       	std	Y+20, r25	; 0x14
    2094:	8b 8b       	std	Y+19, r24	; 0x13
    2096:	8b 89       	ldd	r24, Y+19	; 0x13
    2098:	9c 89       	ldd	r25, Y+20	; 0x14
    209a:	98 8b       	std	Y+16, r25	; 0x10
    209c:	8f 87       	std	Y+15, r24	; 0x0f
    209e:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a0:	98 89       	ldd	r25, Y+16	; 0x10
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <main+0x650>
    20a6:	98 8b       	std	Y+16, r25	; 0x10
    20a8:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(3);        // Delay for 1 millisecond
        // Display the tens digit of the hours on PORTC
        // Clear the lower 6 bits of PORTA and set PA0 high
        PORTA = (PORTA & 0xC0) | 1<<PA0;
    20aa:	ab e3       	ldi	r26, 0x3B	; 59
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	eb e3       	ldi	r30, 0x3B	; 59
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	80 7c       	andi	r24, 0xC0	; 192
    20b6:	81 60       	ori	r24, 0x01	; 1
    20b8:	8c 93       	st	X, r24
        PORTC = (PORTC & 0xF0) | hours_count2;        // Display the tens digit of the hours on PORTC
    20ba:	a5 e3       	ldi	r26, 0x35	; 53
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e5 e3       	ldi	r30, 0x35	; 53
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	98 2f       	mov	r25, r24
    20c6:	90 7f       	andi	r25, 0xF0	; 240
    20c8:	80 91 73 00 	lds	r24, 0x0073
    20cc:	89 2b       	or	r24, r25
    20ce:	8c 93       	st	X, r24
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	a0 e8       	ldi	r26, 0x80	; 128
    20d6:	bf e3       	ldi	r27, 0x3F	; 63
    20d8:	8b 87       	std	Y+11, r24	; 0x0b
    20da:	9c 87       	std	Y+12, r25	; 0x0c
    20dc:	ad 87       	std	Y+13, r26	; 0x0d
    20de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	4a e7       	ldi	r20, 0x7A	; 122
    20ee:	55 e4       	ldi	r21, 0x45	; 69
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	8f 83       	std	Y+7, r24	; 0x07
    20fa:	98 87       	std	Y+8, r25	; 0x08
    20fc:	a9 87       	std	Y+9, r26	; 0x09
    20fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2100:	6f 81       	ldd	r22, Y+7	; 0x07
    2102:	78 85       	ldd	r23, Y+8	; 0x08
    2104:	89 85       	ldd	r24, Y+9	; 0x09
    2106:	9a 85       	ldd	r25, Y+10	; 0x0a
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e8       	ldi	r20, 0x80	; 128
    210e:	5f e3       	ldi	r21, 0x3F	; 63
    2110:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2114:	88 23       	and	r24, r24
    2116:	2c f4       	brge	.+10     	; 0x2122 <main+0x6d0>
		__ticks = 1;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9e 83       	std	Y+6, r25	; 0x06
    211e:	8d 83       	std	Y+5, r24	; 0x05
    2120:	3f c0       	rjmp	.+126    	; 0x21a0 <main+0x74e>
	else if (__tmp > 65535)
    2122:	6f 81       	ldd	r22, Y+7	; 0x07
    2124:	78 85       	ldd	r23, Y+8	; 0x08
    2126:	89 85       	ldd	r24, Y+9	; 0x09
    2128:	9a 85       	ldd	r25, Y+10	; 0x0a
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	3f ef       	ldi	r19, 0xFF	; 255
    212e:	4f e7       	ldi	r20, 0x7F	; 127
    2130:	57 e4       	ldi	r21, 0x47	; 71
    2132:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2136:	18 16       	cp	r1, r24
    2138:	4c f5       	brge	.+82     	; 0x218c <main+0x73a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213a:	6b 85       	ldd	r22, Y+11	; 0x0b
    213c:	7c 85       	ldd	r23, Y+12	; 0x0c
    213e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2140:	9e 85       	ldd	r25, Y+14	; 0x0e
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e2       	ldi	r20, 0x20	; 32
    2148:	51 e4       	ldi	r21, 0x41	; 65
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	bc 01       	movw	r22, r24
    2154:	cd 01       	movw	r24, r26
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	0f c0       	rjmp	.+30     	; 0x2182 <main+0x730>
    2164:	80 e9       	ldi	r24, 0x90	; 144
    2166:	91 e0       	ldi	r25, 0x01	; 1
    2168:	9c 83       	std	Y+4, r25	; 0x04
    216a:	8b 83       	std	Y+3, r24	; 0x03
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	9c 81       	ldd	r25, Y+4	; 0x04
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <main+0x71e>
    2174:	9c 83       	std	Y+4, r25	; 0x04
    2176:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2178:	8d 81       	ldd	r24, Y+5	; 0x05
    217a:	9e 81       	ldd	r25, Y+6	; 0x06
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	69 f7       	brne	.-38     	; 0x2164 <main+0x712>
    218a:	14 c0       	rjmp	.+40     	; 0x21b4 <main+0x762>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218c:	6f 81       	ldd	r22, Y+7	; 0x07
    218e:	78 85       	ldd	r23, Y+8	; 0x08
    2190:	89 85       	ldd	r24, Y+9	; 0x09
    2192:	9a 85       	ldd	r25, Y+10	; 0x0a
    2194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	9e 83       	std	Y+6, r25	; 0x06
    219e:	8d 83       	std	Y+5, r24	; 0x05
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	9e 81       	ldd	r25, Y+6	; 0x06
    21a4:	9a 83       	std	Y+2, r25	; 0x02
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	9a 81       	ldd	r25, Y+2	; 0x02
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <main+0x75a>
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);        // Delay for 1 millisecond

        Toggle_Mode (); // Toggle the mode
    21b4:	0e 94 39 07 	call	0xe72	; 0xe72 <Toggle_Mode>
        adjust_hours(); // Adjust the hours
    21b8:	0e 94 80 07 	call	0xf00	; 0xf00 <adjust_hours>
        adjust_minutes();// Adjust the minutes
    21bc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <adjust_minutes>
        adjust_seconds();// Adjust the seconds
    21c0:	0e 94 46 0b 	call	0x168c	; 0x168c <adjust_seconds>
    21c4:	85 cc       	rjmp	.-1782   	; 0x1ad0 <main+0x7e>

000021c6 <__prologue_saves__>:
    21c6:	2f 92       	push	r2
    21c8:	3f 92       	push	r3
    21ca:	4f 92       	push	r4
    21cc:	5f 92       	push	r5
    21ce:	6f 92       	push	r6
    21d0:	7f 92       	push	r7
    21d2:	8f 92       	push	r8
    21d4:	9f 92       	push	r9
    21d6:	af 92       	push	r10
    21d8:	bf 92       	push	r11
    21da:	cf 92       	push	r12
    21dc:	df 92       	push	r13
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	ca 1b       	sub	r28, r26
    21f0:	db 0b       	sbc	r29, r27
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	09 94       	ijmp

000021fe <__epilogue_restores__>:
    21fe:	2a 88       	ldd	r2, Y+18	; 0x12
    2200:	39 88       	ldd	r3, Y+17	; 0x11
    2202:	48 88       	ldd	r4, Y+16	; 0x10
    2204:	5f 84       	ldd	r5, Y+15	; 0x0f
    2206:	6e 84       	ldd	r6, Y+14	; 0x0e
    2208:	7d 84       	ldd	r7, Y+13	; 0x0d
    220a:	8c 84       	ldd	r8, Y+12	; 0x0c
    220c:	9b 84       	ldd	r9, Y+11	; 0x0b
    220e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2210:	b9 84       	ldd	r11, Y+9	; 0x09
    2212:	c8 84       	ldd	r12, Y+8	; 0x08
    2214:	df 80       	ldd	r13, Y+7	; 0x07
    2216:	ee 80       	ldd	r14, Y+6	; 0x06
    2218:	fd 80       	ldd	r15, Y+5	; 0x05
    221a:	0c 81       	ldd	r16, Y+4	; 0x04
    221c:	1b 81       	ldd	r17, Y+3	; 0x03
    221e:	aa 81       	ldd	r26, Y+2	; 0x02
    2220:	b9 81       	ldd	r27, Y+1	; 0x01
    2222:	ce 0f       	add	r28, r30
    2224:	d1 1d       	adc	r29, r1
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	ed 01       	movw	r28, r26
    2232:	08 95       	ret

00002234 <_exit>:
    2234:	f8 94       	cli

00002236 <__stop_program>:
    2236:	ff cf       	rjmp	.-2      	; 0x2236 <__stop_program>
